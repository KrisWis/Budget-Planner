

/* ТИПЫ ДАННЫХ - https://www.youtube.com/watch?v=n0sPFaLsNeI&list=PLY4rE9dstrJymG1GyPLgOKsJNq9r-p6pX */


/* document - это объект, который позволяет управлять DOM-деревом. 
Функция write() служит для того, чтобы выводить текст, написанный в скобках. 
Но он очень редко используется, т.к не может вывести текст внутри определённого тега. */
document.write("JavaScript говорит привет!");
/* console - объект консоли.
Функция log() выводит текст в консоль. */
console.log("JavaScript говорит привет!");
/* Функция info() нужна для вывода информатионного текста в консоль. */
console.info("JavaScript говорит привет!");
/* Функция error() нужна для вывода сообщения ошибки в консоль. */
console.error("JavaScript говорит привет!");
/* Функция warn() нужна для вывода сообщения предупреждения в консоль. */
console.warn("JavaScript говорит привет!");
/* Чтобы создать переменную, нужно использовать ключевое слово var, а дальше писать уже название переменной. После, через "=" значение переменной. */
var str = 'Web-developer';
/* Функция alert() делает сайт недоступным для пользователя и текст ошибки будет тот, что передан в скобках. */
// alert("Ошибка");
/* Переменная с булевым значением. */
var bool = true;
/* Если переменной не будет задано значение, то она будет равна "undefined". */
var undef;
/* Переменная со значением null. */
var nul = null;
/* Чтобы задать в переменную объект, то нужно указать фигурные скобки. В них будут записаны различные функции и свойства.
Свойство - переменная внутри объекта, которая хранит строку, числа и тд. Метод - переменная внутри функции, которая хранит функцию.
Функции, регулярные выражения, массивы и тд - это всё объектные типы данных. */
var obj = {
  prop: 1,
  prop: function () {
  }
};

/* Лучше всего писать переменные так, экономя память: */
var str = "eewew",
  number = 1,
  bool = true,
  obj = {
    prop: 1,
    prop: function () {
    }
  };


/* ПРИМИТИВНЫЕ И ОБЪЕКТНЫЕ ДАННЫЕ. ОБЁРТКИ - https://www.youtube.com/watch?v=p-Ob8gEJBJs&list=PLY4rE9dstrJymG1GyPLgOKsJNq9r-p6pX&index=2 */


var obj = {
  prop: 1,
  prop: function () {
  }
},
  regexp = "/baba/g",
  func = function () { },
  arr = [1, 2, 3];

// Ключевое слово typeof выводит конкретный тип данных объектных данных.
console.log(typeof obj);
console.log(typeof regexp);
console.log(typeof func);
console.log(typeof arr);

// Мы обращаемся к переменной obj и её свойству prop, в котором меняем значение.
obj.prop = "Другое значение";
// У 3 элемента массива arr меняем значение.
arr[2] = 24;
// Функция toUpperCase() возводит строку в верхний регистр.
str.toUpperCase();
// Ключевое слово new создаёт из примитива объект. Из '2431' получиться {0: "2", 1: "4", 2: "3", 3: "1"}. 
new String('2431');
// Функция toString() переделывает переменную в строку. Если применить это к обёртке, то она приведёт переменную к виду, который был до обёртки.
number.toString();


/* STATEMENTS (ИНСТРУКЦИИ), EXPRESSIONS (ВЫРАЖЕНИЯ), OPERATORS (ОПЕРАТОРЫ) - https://www.youtube.com/watch?v=hqozKP8pol8&list=PLY4rE9dstrJymG1GyPLgOKsJNq9r-p6pX&index=3 */


var statement; // Инструкция
statement = 5 + 2; // Выражение
'Литерал'; // Литерал
// Арифметические операторы это +, -, *, = и тд.
var i = 2;
++i; // Увеличивает значение переменной i на 1.
--i; // Уменьшает значение переменной i на 1.
i++; /* Увеличивает значение переменной i на 1, но только после завершения работы выражения 
    (т.е если засунуть это в console.log(), то выведет старое значение, а если опять использовать console.log(), то выведет, как и должно с прибавкой на 1). */
i--; /* Уменьшает значение переменной i на 1, но только после завершения работы выражения 
    (т.е если засунуть это в console.log(), то выведет старое значение, а если опять использовать console.log(), то выведет, как и должно с убавкой на 1). */

console.log(i += 2) // Оператор += отвечает и за сложение, и за присваивание переменной значения.
// Операторы сравнения это >, <, == и тд. Также, есть операторы строгого равенства и неравенства - "===" и "!==", они сравнивают также и тип данных.


/* УСЛОВНЫЕ И ЛОГИЧЕСКИЕ ОПЕРАТОРЫ - https://www.youtube.com/watch?v=ogmqkRFNmcE&list=PLY4rE9dstrJymG1GyPLgOKsJNq9r-p6pX&index=4 */


var age = 18;
// Пример использования условных операторов if/else if/else.
if (age === 18) {
  console.log("Ты взрослый");
}
else if (age > 18) {
  console.log("Ты старше 18!")
}
else if (age < 18) {
  console.log("Ты младше 18!")
}
else {
  console.log("Ничего не подходит!")
};

/* Пример использования условного оператора "?". 
Сначала задаётся условие, после этого ставиться "?". 
Дальше пишется действие при случае, если условие равно true, ставиться ":" и действие при случае, если условие равно false. */
(age === 18) ? console.log("Ты взрослый") : console.log("Ты не взрослый!");

/* Ещё один пример использования условного оператора "?". 
Если age равен 18, то в консоль выводиться "Ты взрослый",
Если больше 18, то "Ты старше 18!",
Если меньше 18, то "Ты младше 18!",
Если же ничего из вышеперечисленного не подходит, то выводиться "Ничего не подходит!". */
(age === 18) ? console.log("Ты взрослый") :
  (age > 18) ? console.log("Ты старше 18!") :
    (age < 18) ? console.log("Ты младше 18!") :
      console.log("Ничего не подходит!");

// Логические операторы - это "||"(или), "&&"(и), "!"(нет).

// Пример использования "&&"(и): условие, если возраст больше или равен 18, но возраст должен быть меньше или равен 50.
(age >= 18 && age <= 50) ? console.log("Ты взрослый") : console.log("Ваш возраст не подходит!");
// Пример использования "||"(или): условие, если возраст больше или равен 18, или возраст меньше или равен 50.
(age >= 18 || age <= 50) ? console.log("Ты взрослый") : console.log("Ваш возраст не подходит!");
// Пример использования "!"(нет): условие, если возраст не равен 18, то "Ты не взрослый", а если равен, то "Ты взрослый!".
(age !== 18) ? console.log("Ты не взрослый") : console.log("Ты взрослый!");


/* ЧИСЛА - https://www.youtube.com/watch?v=IKddd9ZTwB4&list=PLY4rE9dstrJymG1GyPLgOKsJNq9r-p6pX&index=5 */


var number = 234;
// Функция toFixed() приводит целое число к числу с плавающей точкой. В скобках пишется кол-во чисел после запятой.
number.toFixed(2);
// Функция toExponential() приводит число к экспонентциальному виду.
number.toExponential();
// Функция toPrecision() приводит число с плавающей точкой к целому числу. В скобках пишется, то сколько чисел нужно вывести.
number.toPrecision(4);
// Функция toString() приводит число к строке.
number.toString();
// Мы обращаемся к модулю Math и его функции sqrt(), которая выводит корень числа.
Math.sqrt(number);
// Мы обращаемся к модулю Math и его функции pow(), которая выводит число, которое дано первым в скобках, возведённое в число, данное вторым в скобках.
Math.pow(5, 2);
// Мы обращаемся к модулю Math и его функции floor(), которая всегда округляет число вниз.
Math.floor(number);
// Мы обращаемся к модулю Math и его функции ceil(), которая всегда округляет число вверх.
Math.ceil(number);
// Мы обращаемся к модулю Math и его функции round(), которая округляет число до ближайшего.
Math.round(number);
// Мы обращаемся к модулю Math и его константе PI, которая равно числу пи.
Math.PI;
// NaN(Not a Number) - это то, что нельзя получить. Например, NaN выведется, если поделить 0 на 0 или строку умножить на число.
0 / 0;
// NaN не равен ничему, даже самому себе.
NaN === NaN; // Выведет false.
// Функция isNaN() проверяет равно ли значение, переданное в скобках NaN.
var n = NaN;
isNaN(number); // Вернёт NaN.
1 / 0; // Будет равно infinity.
-1 / 0; // Будет равно -infinity.
Infinity + 31223; // Всё равно будет равно infinity.


/* СТРОКИ - https://www.youtube.com/watch?v=BTzuzSLsai8&list=PLY4rE9dstrJymG1GyPLgOKsJNq9r-p6pX&index=6 */


