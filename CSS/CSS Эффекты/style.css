@charset "UTF-8";
body {
  margin: 0;
  padding: 0;
  text-decoration: none;
  font-family: "Montserrat", sans-serif;
}

.caption {
  color: white;
  font-size: 30px;
  margin-bottom: 100px;
  position: relative;
  top: 5%;
}

/* ОРИГИНАЛЬНЫЙ HOVER-ЭФФЕКТ КНОПКИ. https://www.youtube.com/watch?v=qYkqQCohfAc&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI */
.wrapper1 {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100vh;
  background: linear-gradient(45deg, #3c0453, #2f0000);
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.wrapper1 button {
  text-transform: uppercase;
  text-shadow: 0 0 15px #000;
  letter-spacing: 15px;
  font-size: 100px;
  color: #07e8ff;
  padding: 5% 10%;
  border: none;
  background-color: transparent;
  cursor: pointer;
  box-shadow: 0 30px 50px rgba(0, 0, 0, 0.8);
  position: relative;
  overflow: hidden;
  /* Затемнённая половина кнопки. */
}
.wrapper1 button:before {
  content: "";
  position: absolute;
  top: 3px;
  left: 3px;
  bottom: 3px;
  width: 50%;
  background-color: rgba(255, 255, 255, 0.05);
}
.wrapper1 button span {
  /* Верхняя линия */
  /* Правая линия */
  /* Нижняя линия */
  /* Левая линия */
}
.wrapper1 button span:nth-child(1), .wrapper1 button span:nth-child(2), .wrapper1 button span:nth-child(3), .wrapper1 button span:nth-child(4) {
  position: absolute;
  opacity: 0;
  transition: all 0.3s linear;
}
.wrapper1 button span:nth-child(1) {
  top: 0;
  left: 0;
  width: 100%;
  height: 3px;
  background: linear-gradient(90deg, #2f0000, #07e8ff, #2f0000);
  animation: animateTop 2s linear infinite;
}
.wrapper1 button span:nth-child(2) {
  top: 0;
  right: 0;
  width: 3px;
  height: 100%;
  background: linear-gradient(0, #2f0000, #07e8ff, #2f0000);
  animation: animateRight 2s linear infinite;
}
.wrapper1 button span:nth-child(3) {
  bottom: 0;
  left: 0;
  width: 100%;
  height: 3px;
  background: linear-gradient(90deg, #2f0000, #07e8ff, #2f0000);
  animation: animateBottom 2s linear infinite;
}
.wrapper1 button span:nth-child(4) {
  top: 0;
  left: 0;
  width: 3px;
  height: 100%;
  background: linear-gradient(0, #2f0000, #07e8ff, #2f0000);
  animation: animateLeft 2s linear infinite;
}
.wrapper1 button:hover span:nth-child(1), .wrapper1 button:hover span:nth-child(2), .wrapper1 button:hover span:nth-child(3), .wrapper1 button:hover span:nth-child(4) {
  opacity: 1;
}

@keyframes animateTop {
  0% {
    /* translate () Сдвигает элемент на заданное значение по горизонтали и вертикали в плоскости экрана. */
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}
@keyframes animateRight {
  0% {
    transform: translateY(-100%);
  }
  100% {
    transform: translateY(100%);
  }
}
@keyframes animateBottom {
  0% {
    transform: translateX(100%);
  }
  100% {
    transform: translateX(-100%);
  }
}
@keyframes animateLeft {
  0% {
    transform: translateY(100%);
  }
  100% {
    transform: translateY(-100%);
  }
}
/* АНИМАЦИЯ 3D ПЕРЕВОРОТА КАРТОЧКИ. https://www.youtube.com/watch?v=l7UbiJwE9mc&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=2 */
.wrapper2 {
  background: linear-gradient(10deg, rgb(85, 8, 85), black);
  height: 100vh;
  text-align: center;
}

.card {
  width: 340px;
  height: 320px;
  cursor: pointer;
  position: absolute;
  left: 50%;
  transform: translate(-50%, 50%);
}
.card:hover {
  /* При наведении, поварачиваем задний элемент нам передом, чтобы мы его видели. */
}
.card:hover .front {
  /* При наведении, поворачиваем элемент на 180 градусов, чтобы этот элемент был повёрнут к пользователю задом, 
  а мы сделали backface-visibility: hidden, поэтому элемент не будет виден. 
  Поставлено "-180deg", а не просто "180deg", чтобы при повороте back элемента они не перекрещивались. */
  transform: perspective(600px) rotateY(-180deg);
}
.card:hover .back {
  transform: perspective(600px) rotateY(0);
}

.front,
.back {
  width: 100%;
  height: 100%;
  overflow: hidden;
  position: absolute;
  /* Свойство backface-visibility определяет, должна ли быть видна задняя поверхность элемента, когда он обращен к пользователю. 
  Задняя поверхность элемента является зеркальным отражением отображаемой передней поверхности. 
  Оно позволяет выбрать, должен ли пользователь видеть заднюю поверхность или нет. */
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  transition: transform 0.5s ease;
  border-radius: 10px;
  background: linear-gradient(90deg, rgb(85, 8, 85), black);
}

.front {
  /* Свойство perspective определяет на сколько элемент удален от точки обзора. 
  Чем больше значение, указанное для перспективы, тем дальше от пользователя расположен элемент. 
  Но на самом деле, оно здесь почему то не влияет на то, как мы видим элемент, скорей всего автор ошибся. */
  transform: perspective(600px) rotateY(0);
}
.front img {
  width: 100%;
  height: auto;
}

.back {
  /* Делаем переворот 180 градусов сразу, чтобы этот элемент был повёрнут к пользователю задом, 
  а мы сделали backface-visibility: hidden, поэтому элемент не будет виден. */
  transform: perspective(600px) rotateY(180deg);
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}
.back h1 {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: rgb(110, 40, 144);
  font-size: 24px;
}
.back h1 span {
  display: flex;
  font-size: 18px;
  font-weight: 800;
  margin: 5px 0 10px;
  justify-content: baseline;
  align-items: baseline;
  gap: 5px;
}
.back h1 span span {
  color: rgb(56, 8, 81);
}
.back .socials {
  list-style: none;
  display: flex;
  justify-content: space-between;
}
.back .socials a {
  color: rgb(91, 23, 128);
  display: inline-flex;
  width: 40px;
  height: 40px;
  /* Выравниваем иконки, которые находятся в тегах <a> по центру */
  justify-content: center;
  align-items: center;
  font-size: 22px;
  border-radius: 50%;
  transition: 0.4s ease;
}
.back .socials a:hover {
  background-color: rgb(91, 23, 128);
  color: rgb(167, 0, 250);
}

/* КАРТОЧКИ СО СКОШЕННЫМ ДИЗАЙНОМ. https://www.youtube.com/watch?v=1JYPSI1ZDBc&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=3&pp=iAQB */
.wrapper3 {
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  min-height: 100vh;
  background: linear-gradient(#000, #01042d);
  font-family: "Titillium Web", sans-serif;
  /* z-index нужен для того, чтобы background корректно отображался, так как теперь wrapper3 формирует новый контекст позиционирования. */
  position: relative;
  z-index: 0;
}

.container3 {
  position: relative;
  display: flex;
  justify-content: space-around;
  gap: 100px;
}

.wrapper3 .content {
  position: relative;
  padding: 20px;
  color: #fff;
}
.wrapper3 .content h2 {
  position: absolute;
  top: -60px;
  right: 20px;
  margin: 0;
  padding: 0;
  font-size: 160px;
  line-height: 1.2;
  color: rgba(255, 255, 255, 0.06);
  transition: 0.5s;
}
.wrapper3 .content h3 {
  margin: 0 0 10px;
  font-size: 24px;
  letter-spacing: 2px;
  font-weight: 700;
}
.wrapper3 .content p {
  margin: 0;
  font-size: 14px;
  letter-spacing: 2px;
  line-height: 1.2;
}
.wrapper3 .content button {
  cursor: pointer;
  position: relative;
  margin: 20px 0 0;
  padding: 10px 20px;
  background-color: transparent;
  border: 1px solid #fff;
  color: #fff;
  transition: 0.5s;
  transform: translateY(-40px);
  opacity: 0;
  visibility: hidden;
  text-transform: uppercase;
  font-size: 12px;
  z-index: 1;
}
.wrapper3 .content button:hover {
  color: #000;
  background-color: #fff;
}

.box3 {
  width: 300px;
  min-height: 450px;
  cursor: pointer;
  position: relative;
  background-color: #040a20;
  display: flex;
  justify-content: center;
  align-items: flex-end;
  border: 1px solid rgba(0, 0, 0, 0.5);
  /* Сдвиг при наведении */
}
.box3:hover .content h2 {
  top: -120px;
}
.box3:hover .content button {
  transform: translateY(0);
  opacity: 1;
  visibility: visible;
}
.box3::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 50%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.06);
}
.box3::before {
  content: "";
  position: absolute;
  top: -3px;
  left: -3px;
  right: -3px;
  bottom: -3px;
  /* skew() трансформирует элемент, наклоняя его в 2D-пространстве. */
  transform: skew(2deg, 2deg);
  z-index: -1;
}
.box3:nth-child(1):before {
  background: linear-gradient(#ff0000, #0037ff);
}
.box3:nth-child(2):before {
  background: linear-gradient(#d3ff00, #17f4ff);
}
.box3:nth-child(3):before {
  background: linear-gradient(#af36ff, #ff0070);
}

/* КНОПКИ СОЦИАЛЬНЫХ СЕТЕЙ С КРЕАТИВНЫМ HOVER-ЭФФЕКТОМ. https://www.youtube.com/watch?v=IqMBPjwg8nM&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=4 */
.wrapper4 {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: linear-gradient(45deg, #ee0979, #ff6a00);
}

.container4 {
  display: flex;
  list-style: none;
}
.container4 li {
  margin: 10px;
}
.container4 a {
  text-decoration: none;
  background-color: #f1f1f1;
  color: #ff2626;
  width: 100px;
  height: 100px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 30%;
  box-shadow: -5px 5px 20px -5px #010101;
  position: relative;
  overflow: hidden;
  /* Создаём штуку, которая будет покрывать элемент при наведении */
}
.container4 a i {
  font-size: 34px;
  transition: 0.3s ease;
}
.container4 a:before {
  content: "";
  position: absolute;
  width: 120%;
  height: 120%;
  background-color: #ff2626;
  left: -110%;
  top: 90%;
  /* Поворачиваем её на 45 градусов, чтобы лучше выглядела */
  transform: rotate(45deg);
}
.container4 a:hover {
  /* Увеличиваем иконку и меняем её цвет при наведении */
}
.container4 a:hover i {
  transform: scale(1.3);
  color: #f1f1f1;
}
.container4 a:hover::before {
  animation-name: hover;
  animation-duration: 0.6s;
  top: -10%;
  left: -10%;
}

@keyframes hover {
  /* Сначала позиция таже, что и изначально */
  0% {
    top: -110%;
    left: 90%;
  }
  /* Потом позиционируем элемент ниже и правее */
  50% {
    top: 10%;
    left: -30%;
  }
  /* И чтобы красный фон полностью заполнил элемент позициионируем ещё раз */
  100% {
    top: -10%;
    left: -10%;
  }
}
/* КНОПКA С НЕОНОВЫМ СВЕТОМ. https://www.youtube.com/watch?v=iha5Z6qv8xs&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=5 */
.wrapper5 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background: linear-gradient(45deg, #333, #5a5454);
}

.wrapper5 button {
  font-family: "Gochi Hand", cursive;
  position: relative;
  color: #1bffff;
  text-transform: uppercase;
  background-color: transparent;
  font-size: 100px;
  letter-spacing: 3px;
  overflow: hidden;
  padding: 5% 10%;
  cursor: pointer;
  border: none;
  transition: 0.6s ease;
}
.wrapper5 button:hover {
  color: #333;
  background-color: #1bffff;
  transition-delay: 0.5s;
  box-shadow: 0 0 10px #1bffff, 0 0 40px #1bffff, 0 0 80px #1bffff;
}
.wrapper5 button:hover span:nth-child(1) {
  left: 100%;
}
.wrapper5 button:hover span:nth-child(2) {
  top: 100%;
}
.wrapper5 button:hover span:nth-child(3) {
  right: 100%;
}
.wrapper5 button:hover span:nth-child(4) {
  bottom: 100%;
}
.wrapper5 button span {
  display: block;
  position: absolute;
  transition: 0.6s ease;
}
.wrapper5 button span:nth-child(1) {
  top: 0;
  left: -100%;
  width: 100%;
  height: 5px;
  background: linear-gradient(90deg, transparent, #1bffff);
  transition-delay: 0.25s;
}
.wrapper5 button span:nth-child(2) {
  top: -100%;
  right: 0;
  width: 5px;
  height: 100%;
  background: linear-gradient(180deg, transparent, #1bffff);
}
.wrapper5 button span:nth-child(3) {
  bottom: 0;
  right: -100%;
  width: 100%;
  height: 5px;
  background: linear-gradient(270deg, transparent, #1bffff);
  transition-delay: 0.25s;
}
.wrapper5 button span:nth-child(4) {
  bottom: -100%;
  left: 0;
  width: 5px;
  height: 100%;
  background: linear-gradient(0, transparent, #1bffff);
}

/* МИНИМАЛИСТИЧНАЯ СТРАНИЦА ОШИБКИ. https://www.youtube.com/watch?v=32GwTL-8yXQ&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=6 */
.wrapper6 {
  margin: 0;
  padding: 0;
  height: 100vh;
  font-family: "Montserrat", sans-serif;
  background: linear-gradient(80deg, violet, black, black);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.container6 {
  display: flex;
  flex-direction: column;
  text-align: center;
}
.container6 h2 {
  margin: 10px 0;
}
.container6 h2 span {
  color: rgb(34, 2, 47);
}
.container6 h1 {
  margin: 0;
  font-size: 170px;
  letter-spacing: 20px;
  /* Задаём background изображением */
  background: url(logo.png) center;
  background-size: contain;
  /* Свойство -webkit-text-fill-color равносильно свойству color для текста. Т.е просто меняет цвет текста */
  -webkit-text-fill-color: transparent;
  /* Свойство background-clip определяет, где простирается фон элемента, в нашем случае - за текстом. */
  background-clip: text;
  -webkit-background-clip: text;
}
.container6 p {
  font-size: 20px;
}
.container6 p span {
  color: rgb(54, 4, 75);
}
.container6 a {
  display: inline-block;
  text-decoration: none;
  color: black;
  text-transform: uppercase;
  padding: 3% 6%;
  border-radius: 20px;
  font-size: 14px;
  transition: all 0.6s ease;
  position: relative;
  z-index: 0;
  /* Создаём 2 псевдоэлемента и в каждом задаём свойство background cо своими значениями.
  У after свойство opacity равно 0, поэтому виден только before.
  А при наведении, after делаем opacity: 1, а before делаем opacity: 0, чтобы был виден только фон after. */
}
.container6 a:before {
  content: "";
  display: block;
  position: absolute;
  border-radius: 20px;
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, violet, black, black);
  z-index: -1;
  left: 0.5%;
  bottom: 5%;
  transition: all 0.6s ease;
}
.container6 a:after {
  content: "";
  display: block;
  position: absolute;
  border-radius: 20px;
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, black, black, violet);
  z-index: -1;
  left: 0.5%;
  bottom: 5%;
  opacity: 0;
  transition: all 0.6s ease;
}
.container6 a span {
  color: rgb(54, 4, 75);
}
.container6 a:hover {
  color: rgb(54, 4, 75);
}
.container6 a:hover span {
  color: black;
}
.container6 a:hover:before {
  opacity: 0;
}
.container6 a:hover:after {
  opacity: 1;
}

/* ОТЗЫВЧИВОЕ МЕНЮ НАВИГАЦИИ. https://www.youtube.com/watch?v=z-3hnHn6V5w&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI */
.wrapper7 {
  margin: 0;
  padding: 0;
  font-family: "Montserrat", sans-serif;
  color: #fff;
  background: #f4f5f8;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.wrapper7 .caption {
  text-align: center;
  color: black;
}

header {
  min-height: 100px;
  background: linear-gradient(-45deg, #00537e, #3aa17e);
  padding: 0 20px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.2);
  /* Уносим switcher за пределы экрана, чтобы пользователь его не видел */
}
header .switcher {
  position: absolute;
  visibility: hidden;
  left: -9999px;
}
header label {
  font-size: 30px;
  cursor: pointer;
  display: none;
}
header ul {
  list-style-type: none;
  display: flex;
}
header a {
  display: block;
  text-transform: uppercase;
  text-decoration: none;
  padding: 0 15px;
  color: white;
  transition: 0.45s;
}
header a:hover {
  color: #3498db;
}

@media screen and (max-width: 800px) {
  /* Делаем так чтобы иконки открытия и закрытия были видны */
  .open,
  .close {
    display: block;
  }
  /* Закрывающая иконка находиться выше */
  .close {
    position: absolute;
    top: 40px;
    right: 40px;
  }
  /* Селектор :checked представляет любой элемент radio, checkbox или option, который отмечен или переведен в on состояние. */
  /* Знак "~" работает так, что стили применяются ко всем nav, которые идут за .switcher:checked. */
  /* Следующие 2 строчки отвечает за то, чтобы панель навигации выдвигалась по нажатию на switcher.
  Так как, изначально у неё стоит right: -100% и она не видна пользователю, то делаем right: 0. */
  .switcher:checked ~ nav {
    right: 0;
  }
  /* Создаём панель навигации но убираем её вправо на 100%, чтобы пользователь не мог её видеть*/
  nav {
    position: fixed;
    width: 100%;
    height: 100vh;
    background: linear-gradient(180deg, #00537e, #3aa17e);
    right: -100%;
    top: 0;
    text-align: center;
    padding: 100px 0;
    transition: 0.7s;
  }
  ul {
    flex-direction: column;
  }
  ul a {
    padding: 20px;
  }
  ul a:hover {
    background-color: rgba(255, 255, 255, 0.03);
  }
}
/* АНИМИРОВАННЫЙ ИНДИКАТОР ВЫПОЛНЕНИЯ. https://www.youtube.com/watch?v=z-jJrClQXRQ&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=8 */
.wrapper8 {
  background: linear-gradient(45deg, #93278f, #00a99d);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  min-height: 100vh;
  font-family: "Montserrat", sans-serif;
  padding: 0 200px;
}

.progress {
  cursor: pointer;
  background-color: #111;
  height: 40px;
  width: 70%;
  border-radius: 5px;
  position: relative;
  margin-bottom: 70px;
  padding: 6px;
}
.progress:hover {
  /* При наведении, начинаем анимацию */
  /* А число поднимаем выше. */
}
.progress:hover .fill {
  animation-play-state: running;
}
.progress:hover .number {
  transform: translateY(-40px);
  visibility: visible;
  opacity: 1;
}
.progress .fill {
  /* Ширина определяет то, на сколько процентов заполнен прогресс бар */
  width: 50%;
  /* В свойстве background чередуются цвета, которые использованы в прогресс баре. 
  Количество градусов определяет наклон палочек. 
  Настройка градиента идёт снизу вверх и указываем два цвета с одинаковыми процентами, чтобы они чередовались. */
  background: linear-gradient(45deg, rgba(218, 9, 218, 0.5) 25%, black 25%, black 50%, rgba(218, 9, 218, 0.5) 50%, rgba(218, 9, 218, 0.5) 75%, black 75%);
  background-size: 40px;
  border-radius: 5px;
  height: 100%;
  animation: move 0.5s linear infinite paused;
}
.progress .number {
  position: absolute;
  right: 0;
  top: 0;
  background-color: rgba(255, 255, 255, 0.6);
  padding: 5px 10px;
  border-radius: 5px;
  font-size: 18px;
  transition: 0.3s ease;
  visibility: hidden;
  opacity: 0;
}

/* Анимация для движения прогресс бара */
@keyframes move {
  100% {
    background-position: 40px 0;
  }
}
/* АНИМАЦИЯ 3D ВРАЩЕНИЯ. https://www.youtube.com/watch?v=LKI-i_J79EQ&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=9 */
.wrapper9 {
  margin: 0;
  padding: 0;
  background: linear-gradient(45deg, #009245, #fcee21);
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

.spinner {
  /* Свойство perspective определяет на сколько элемент удален от точки обзора. 
  Чем больше значение, указанное для перспективы, тем дальше от пользователя расположен элемент. 
  Но на самом деле, оно здесь почему то не влияет на то, как мы видим элемент, скорей всего автор ошибся. */
  perspective: 1000px;
  -webkit-perspective: 1000px;
}
.spinner .circle,
.spinner .line {
  width: 260px;
  height: 260px;
  border: 5px solid white;
  border-radius: 50%;
}
.spinner .circle {
  position: relative;
  /* Свойство transform-style определяет, будут ли дочерние элементы элемента расположены в трехмерном пространстве или будут сглажены в плоскости элемента. 
  У нас - в трёхмерном и создаётся некая иллюзия, что полосок много, но на самом деле их 4. */
  transform-style: preserve-3d;
  -webkit-transform-style: preserve-3d;
  animation: spinn 6s infinite linear;
}
.spinner .line {
  display: block;
  position: absolute;
  top: -5px;
  right: 0;
  bottom: 0;
  left: -5px;
}
.spinner .line:nth-child(1) {
  transform: rotateY(36deg);
}
.spinner .line:nth-child(2) {
  transform: rotateY(72deg);
}
.spinner .line:nth-child(3) {
  transform: rotateY(108deg);
}
.spinner .line:nth-child(4) {
  transform: rotateY(144deg);
}

@keyframes spinn {
  100% {
    transform: rotateY(360deg) rotateZ(360deg);
  }
}
/* АНИМИРОВАННЫЙ ТЕКСТ ЗАГРУЗКИ. https://www.youtube.com/watch?v=ITYNnrDSk68&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=10 */
.wrapper10 {
  margin: 0;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  min-height: 100vh;
  background: linear-gradient(45deg, #333333, #4c4a4a);
}

.wrapper10 h1 {
  font-family: "Lato", sans-serif;
  position: relative;
  color: #212121;
  font-size: 150px;
  letter-spacing: 5px;
  text-transform: uppercase;
  border-bottom: 18px solid #212121;
}
.wrapper10 h1:before {
  content: "Loading...";
  position: absolute;
  top: 0;
  left: 0;
  color: #00ffff;
  border-bottom: 18px solid #00ffff;
  overflow: hidden;
  animation: loading 8s infinite linear;
}

@keyframes loading {
  0% {
    width: 0;
  }
  100% {
    width: 100%;
  }
}
/* АНИМИРОВАННЫЕ КНОПКИ С ГРАДИЕНТОМ. https://www.youtube.com/watch?v=TfziVoVo-94&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=11 */
.wrapper11 {
  margin: 0;
  padding: 0;
  font-family: "Poppins", sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background-color: #373737;
  flex-direction: column;
}

.container11 {
  width: 100%;
  display: flex;
  justify-content: space-around;
}

.btn {
  min-width: 200px;
  border: none;
  cursor: pointer;
  letter-spacing: 1px;
  color: #fff;
  text-transform: uppercase;
  text-shadow: 0 1px 2px #000;
  padding: 20px;
  border-radius: 15px;
  background-size: 220%;
  box-shadow: 0 5px 5px -5px #010101;
  transition: 0.5s ease;
}
.btn-1 {
  background-image: linear-gradient(45deg, #ed1e79, #662d8c, #ed1e79);
}
.btn-2 {
  background-image: linear-gradient(45deg, #63e2ff, #d585ff, #63e2ff);
}
.btn-3 {
  background-image: linear-gradient(45deg, #fcee21, #009e00, #fcee21);
}
.btn-4 {
  background-image: linear-gradient(45deg, #fbb03b, #d4145a, #fbb03b);
}
.btn:hover {
  background-position: right;
}

/* КРУГОВАЯ ПОЛОСА ПРОГРЕССА. https://www.youtube.com/watch?v=hRYA1CXfwP4&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=12 */
.container12 .percent .number, .container12 .card12, .wrapper12 {
  display: flex;
  justify-content: center;
  align-items: center;
}

.wrapper12 {
  margin: 0;
  padding: 0;
  font-family: "Poppins", sans-serif;
  min-height: 100vh;
  background: linear-gradient(45deg, #333333, #5a5454);
  display: flex;
  flex-direction: column;
}

.container12 {
  position: relative;
  width: 960px;
  display: flex;
  justify-content: space-around;
}
.container12 .card12 {
  position: relative;
  width: 250px;
  height: 330px;
  border-radius: 10px;
  background: rgba(0, 0, 0, 0.5);
  cursor: pointer;
  text-align: center;
  overflow: hidden;
  transition: 0.5s ease;
}
.container12 .card12:hover {
  transform: translatey(-15px);
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.5);
}
.container12 .card12:hover .number h2 {
  color: #fff;
  font-size: 50px;
}
.container12 .card12:hover .number h2 span {
  color: #fff;
}
.container12 .card12:hover h3 {
  color: #fff;
}
.container12 .card12:before {
  content: "";
  position: absolute;
  top: 0;
  left: -50%;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.03);
  pointer-events: none;
}
.container12 .percent {
  position: relative;
  width: 150px;
  height: 150px;
  border-radius: 50%;
  box-shadow: inset 0 0 50px #000;
  background-color: #222;
  z-index: 1;
}
.container12 .percent h3 {
  margin-top: 16px;
  color: #777;
  font-size: 22px;
  transition: 0.5s ease;
}
.container12 .percent .number {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
}
.container12 .percent .number h2 {
  color: #777;
  font-size: 44px;
  transition: 0.5s ease;
}
.container12 .percent .number h2 span {
  color: #777;
  padding-left: 3px;
  font-size: 24px;
  transition: 0.5s ease;
}
.container12 .percent h3 {
  margin-top: 16px;
  color: #777;
  font-size: 22px;
  transition: 0.5s ease;
}

svg {
  position: relative;
  width: 150px;
  height: 150px;
  transform: rotate(-85deg);
}
svg circle {
  width: 100%;
  height: 100%;
  fill: none;
  stroke: #191919;
  stroke-width: 10;
  stroke-linecap: round;
  transform: translate(5px, 5px);
}
svg circle:nth-child(2) {
  /* Свойство stroke-dasharray нужно для пунктирной, чтобы определить длину штриха и пробела. 
  Т.к у нас одно значение, то оно применяется и к пробелу и к штриху. */
  stroke-dasharray: 440;
  stroke-dashoffset: 440;
}

.card12:nth-child(1) svg circle:nth-child(2) {
  stroke-dashoffset: 44;
  stroke: #63E2FF;
}
.card12:nth-child(2) svg circle:nth-child(2) {
  stroke-dashoffset: 176;
  stroke: #D9E021;
}
.card12:nth-child(3) svg circle:nth-child(2) {
  stroke-dashoffset: 264;
  stroke: #ED1E79;
}

/* ОРИГИНАЛЬНЫЙ ЭФФЕКТ ВРАЩЕНИЯ КАРТОЧКИ. https://www.youtube.com/watch?v=d1xGDF2ToEY&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=13 */
.wrapper13 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-around;
  min-height: 100vh;
  background: linear-gradient(45deg, #fca5f1, #b5ffff);
  font-family: "Montserrat", sans-serif;
}

.card13 {
  width: 400px;
  height: 300px;
  border: 10px solid #f1f1f1;
  overflow: hidden;
  position: relative;
  text-align: center;
  box-shadow: -5px 5px 10px -5px #010101;
}
.card13 .content {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 400px;
  height: 300px;
  position: absolute;
  overflow: hidden;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.5);
  color: #fff;
  opacity: 0;
  transform: translate(400px, -100px) rotate(180deg);
  transition: 0.4s ease-in-out;
}
.card13 img {
  width: auto;
  height: 100%;
}
.card13 h2 {
  text-transform: uppercase;
  position: relative;
  top: -7%;
  letter-spacing: 1px;
  font-size: 16px;
  margin: 0;
  padding: 15px 10px;
  background-color: rgba(0, 0, 0, 0.8);
  transform: translatey(-100px);
  transition: 0.2s ease-in-out;
}
.card13 p {
  font-size: 14px;
  font-weight: 300;
  position: relative;
  right: 4%;
  padding: 0 10px;
  transform: translatex(300px) rotate(90deg);
  transition: 0.2s ease-in-out;
}
.card13 a {
  align-self: center;
  position: relative;
  bottom: 10%;
  right: 4.5%;
  display: inline-block;
  text-decoration: none;
  padding: 7px 15px;
  margin-bottom: 15px;
  border: 1px solid #fff;
  color: #fff;
  text-transform: uppercase;
  transform: translatey(-200px);
  transition: 0.2s ease-in-out;
}
.card13 a:hover {
  background-color: rgba(255, 255, 255, 0.3);
}
.card13:hover .content {
  opacity: 1;
  transition-delay: 0s;
  transform: translate(0, 0);
}
.card13:hover h2 {
  transform: translatey(0);
  transition-delay: 0.5s;
}
.card13:hover p {
  transform: translatex(0) rotate(0);
  transition-delay: 0.4s;
}
.card13:hover a {
  transform: translatey(0);
}

/* АНИМИРОВАННЫЙ ЗАГРУЗЧИК PACMAN. https://www.youtube.com/watch?v=t8jMqkEzpKo&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=14 */
.wrapper14 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #333;
}

.pacman {
  position: relative;
  width: 160px;
  height: 160px;
}
.pacman:before, .pacman:after {
  content: "";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 0;
  height: 0;
  border: 80px solid #ffd000;
  border-radius: 50%;
  border-right: 80px solid transparent;
  animation: animate1 linear 0.5s infinite;
}
.pacman:after {
  animation: animate2 linear 0.5s infinite;
}
.pacman div {
  background-color: #ffd000;
  border-radius: 50%;
  width: 25px;
  height: 25px;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: -100px;
  opacity: 0;
}
.pacman div:nth-child(1) {
  animation: ball 1s 1s infinite linear;
}
.pacman div:nth-child(2) {
  animation: ball 1s 0.5s infinite linear;
}
.pacman div:nth-child(3) {
  animation: ball 1s 0s infinite linear;
}

@keyframes animate1 {
  0% {
    transform: rotate(270deg);
  }
  50% {
    transform: rotate(360deg);
  }
  100% {
    transform: rotate(270deg);
  }
}
@keyframes animate2 {
  0% {
    transform: rotate(90deg);
  }
  50% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(90deg);
  }
}
@keyframes ball {
  20%, 80% {
    opacity: 1;
  }
  100% {
    transform: translate(-120px, -50%);
  }
}
/* КРЕАТИВНЫЙ ОДНОСТРАНИЧНЫЙ СЛАЙДЕР. https://www.youtube.com/watch?v=sOsDBYOi74Q&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=15 */
.wrapper15 {
  height: 100vh;
  color: #fff;
  font-family: "Sedgwick Ave", cursive;
  overflow: hidden;
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  /* Директива SCSS @for работает так, что сначала задаётся переменная (у нас - $i), 
  пишется ключевое слово "from" и после него - индекс элемента с которого начнётся цикл, 
  потом ключевое слово "through" и число до которого будет идти цикл (у нас это длина списка $colors). */
  /* Все эти свойства применяются для всех section. 
  Чтобы использовать переменную нужно написать "#", потом фигурные скобки и название переменной. */
  /* Все эти свойства применяются для всех section. 
  Чтобы использовать переменную нужно написать "#", потом фигурные скобки и название переменной. */
  /* Все эти свойства применяются для всех section. 
  Чтобы использовать переменную нужно написать "#", потом фигурные скобки и название переменной. */
  /* Все эти свойства применяются для всех section. 
  Чтобы использовать переменную нужно написать "#", потом фигурные скобки и название переменной. */
}
.wrapper15 .caption {
  position: absolute;
  z-index: 2;
}
.wrapper15 input {
  display: none;
}
.wrapper15 input#section1:checked ~ nav label[for=section1] {
  background-color: #fff;
}
.wrapper15 input#section1:checked ~ section:nth-of-type(1) {
  transform: translateY(0);
  transition: 0.3s ease;
  transition-delay: 0.2s;
  z-index: 1;
}
.wrapper15 input#section2:checked ~ nav label[for=section2] {
  background-color: #fff;
}
.wrapper15 input#section2:checked ~ section:nth-of-type(2) {
  transform: translateY(0);
  transition: 0.3s ease;
  transition-delay: 0.2s;
  z-index: 1;
}
.wrapper15 input#section3:checked ~ nav label[for=section3] {
  background-color: #fff;
}
.wrapper15 input#section3:checked ~ section:nth-of-type(3) {
  transform: translateY(0);
  transition: 0.3s ease;
  transition-delay: 0.2s;
  z-index: 1;
}
.wrapper15 input#section4:checked ~ nav label[for=section4] {
  background-color: #fff;
}
.wrapper15 input#section4:checked ~ section:nth-of-type(4) {
  transform: translateY(0);
  transition: 0.3s ease;
  transition-delay: 0.2s;
  z-index: 1;
}
.wrapper15 nav {
  position: absolute;
  right: 30px;
  z-index: 2;
  transform: translateY(-50%);
  top: 50%;
}
.wrapper15 nav label {
  display: block;
  width: 14px;
  height: 14px;
  margin: 12px 0;
  border: 2px solid #fff;
  border-radius: 50%;
  cursor: pointer;
  transition: 0.3s ease;
}
.wrapper15 nav label:hover {
  background-color: #fff;
}
.wrapper15 section {
  position: absolute;
  right: 0;
  height: 100%;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition-delay: 0.5s;
  transform: translateY(-100%);
}
.wrapper15 section:nth-of-type(1) {
  background-color: #662d8c;
}
.wrapper15 section:nth-of-type(2) {
  background-color: #009245;
}
.wrapper15 section:nth-of-type(3) {
  background-color: #2e3192;
}
.wrapper15 section:nth-of-type(4) {
  background-color: #ed1c24;
}
.wrapper15 section h2 {
  font-size: 140px;
  text-align: center;
  letter-spacing: 5px;
  color: #fff;
}

/* ПАРАЛЛАКС ЭФФЕКТ. https://www.youtube.com/watch?v=QEGsNQosAt0&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=16 */
.wrapper16 {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background-image: url(background16.jpg);
  /* Свойство background-attachment устанавливает, будет ли прокручиваться фоновое изображение вместе с содержимым элемента. 
  Изображение может быть зафиксировано и оставаться неподвижным, либо перемещаться совместно с документом. */
  background-attachment: fixed;
  justify-content: center;
  color: #ffffff;
  font-size: 60px;
  align-items: center;
  position: relative;
}
.wrapper16:after {
  position: absolute;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  z-index: 2;
}
.wrapper16 h1 {
  font-size: 90px;
  letter-spacing: 5px;
  text-shadow: 5px 5px 10px #000;
  margin-top: 0;
  text-align: center;
  z-index: 3;
}
.wrapper16 p {
  font-size: 20px;
  letter-spacing: 1px;
  max-width: 60%;
  z-index: 3;
}

/* GLITCH ЭФФЕКТ. https://www.youtube.com/watch?v=gbXx9I1qQN4&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=17 */
.wrapper17 {
  margin: 0;
  padding: 0;
  background-color: #000;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}
.wrapper17 h1 {
  color: #fff;
  font-family: "Raleway", sans-serif;
  margin: 0;
  text-transform: uppercase;
  color: #fff;
  letter-spacing: 20px;
  font-size: 140px;
  position: relative;
  /* Накладываем анимацию для двух псевдоэлементов для пущего эффекта глича. */
}
.wrapper17 h1:after, .wrapper17 h1:before {
  content: "Glitch Effect";
  position: absolute;
  top: 0;
  color: #fff;
  background-color: #000;
  overflow: hidden;
}
.wrapper17 h1:after {
  left: 2px;
  text-shadow: -1px 0 #ff1b1b;
  animation: glitch 2s infinite ease;
}
.wrapper17 h1:before {
  left: -2px;
  text-shadow: 1px 0 #2124ff;
  animation: glitch 10s infinite ease;
}
@keyframes glitch {
  0% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(88% 0 13% 0);
            clip-path: inset(88% 0 13% 0);
  }
  4% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(13% 0 12% 0);
            clip-path: inset(13% 0 12% 0);
  }
  8% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(18% 0 47% 0);
            clip-path: inset(18% 0 47% 0);
  }
  12% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(7% 0 58% 0);
            clip-path: inset(7% 0 58% 0);
  }
  16% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(35% 0 58% 0);
            clip-path: inset(35% 0 58% 0);
  }
  20% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(51% 0 14% 0);
            clip-path: inset(51% 0 14% 0);
  }
  24% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(71% 0 12% 0);
            clip-path: inset(71% 0 12% 0);
  }
  28% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(30% 0 57% 0);
            clip-path: inset(30% 0 57% 0);
  }
  32% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(52% 0 35% 0);
            clip-path: inset(52% 0 35% 0);
  }
  36% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(49% 0 17% 0);
            clip-path: inset(49% 0 17% 0);
  }
  40% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(15% 0 5% 0);
            clip-path: inset(15% 0 5% 0);
  }
  44% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(69% 0 23% 0);
            clip-path: inset(69% 0 23% 0);
  }
  48% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(24% 0 31% 0);
            clip-path: inset(24% 0 31% 0);
  }
  52% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(74% 0 9% 0);
            clip-path: inset(74% 0 9% 0);
  }
  56% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(51% 0 11% 0);
            clip-path: inset(51% 0 11% 0);
  }
  60% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(23% 0 77% 0);
            clip-path: inset(23% 0 77% 0);
  }
  64% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(41% 0 44% 0);
            clip-path: inset(41% 0 44% 0);
  }
  68% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(57% 0 40% 0);
            clip-path: inset(57% 0 40% 0);
  }
  72% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(14% 0 26% 0);
            clip-path: inset(14% 0 26% 0);
  }
  76% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(64% 0 4% 0);
            clip-path: inset(64% 0 4% 0);
  }
  80% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(6% 0 47% 0);
            clip-path: inset(6% 0 47% 0);
  }
  84% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(22% 0 32% 0);
            clip-path: inset(22% 0 32% 0);
  }
  88% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(21% 0 18% 0);
            clip-path: inset(21% 0 18% 0);
  }
  92% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(36% 0 49% 0);
            clip-path: inset(36% 0 49% 0);
  }
  96% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(66% 0 26% 0);
            clip-path: inset(66% 0 26% 0);
  }
  100% {
    /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
    Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. 
    Т.е мы видим только некоторые части слова, поэтому создаётся эффект глича. */
    /* inset() определяет логический блок и встроенные начальное и конечное смещения элемента, которые отображают физическое смещение, 
    зависящее от способа записи, направления и ориентации текста. 
    Здесь мы его используем для вычисления смещения элемента, чтобы отрезать эту часть. */
    -webkit-clip-path: inset(2% 0 14% 0);
            clip-path: inset(2% 0 14% 0);
  }
}

/* ВРАЩАЮЩИЕСЯ 3D КНОПКИ. https://www.youtube.com/watch?v=XlsEP9iQs1s&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=18 */
.wrapper18 {
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: linear-gradient(45deg, #00ac85, #ffff7e);
  flex-direction: column;
}

.container18 {
  display: inline-block;
  margin: 10px;
  height: 50px;
  width: 200px;
  cursor: pointer;
  perspective: 1000;
  -webkit-perspective: 1000;
}
.container18 .flipper--1 .front18,
.container18 .flipper--1 .back18 {
  background: linear-gradient(45deg, #c4302b, #fff31b);
}
.container18 .flipper--2 .front18,
.container18 .flipper--2 .back18 {
  background: linear-gradient(45deg, #2183bf, #2faffe);
}
.container18 .flipper--3 .front18,
.container18 .flipper--3 .back18 {
  background: linear-gradient(45deg, #b12169, #ff2f97);
}
.container18:hover .flipper {
  transform: rotateX(-90deg);
}
.container18 .flipper {
  transition: all 0.5s ease;
  transform-style: preserve-3d;
  position: relative;
  /* Свойство transfrom-origin задаёт место, с которого начнётся преобразование элемента - https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin. */
  transform-origin: 100% 25px;
}
.container18 .button {
  border: none;
  position: absolute;
  top: 0;
  left: 0;
  height: 50px;
  width: 180px;
  padding: 0 10px;
  border-radius: 5px;
  backface-visibility: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: "Montserrat", sans-serif;
  text-align: center;
  color: #fff;
  letter-spacing: 2px;
}
.container18 .button .fa {
  font-size: 24px;
}
.container18 .button.front18 {
  transform: translateZ(22px);
}
.container18 .button.back18 {
  text-shadow: 1px 0 2px #000;
  transform: rotateX(90deg) translateZ(22px);
}

/* КНОПКА С АНИМАЦИЕЙ ВОЛНЫ. https://www.youtube.com/watch?v=hSeNSV2Epzo&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=19 */
.wrapper19 {
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #333;
  flex-direction: column;
}
.wrapper19 button {
  font-family: "Patrick Hand", cursive;
  font-size: 24px;
  letter-spacing: 2px;
  text-transform: uppercase;
  padding: 20px 30px;
  width: 250px;
  font-weight: 600;
  color: #fff;
  border: none;
  border-radius: 3px;
  position: relative;
  overflow: hidden;
  cursor: pointer;
}
.wrapper19 button:hover .wave {
  top: -150px;
}
.wrapper19 button span {
  position: relative;
}
.wrapper19 button .wave {
  position: absolute;
  top: -100px;
  left: 0;
  width: 250px;
  height: 250px;
  background: linear-gradient(45deg, #4f00bc, #29abe3);
  transition: 0.5s ease;
}
.wrapper19 button .wave:after, .wrapper19 button .wave:before {
  content: "";
  position: absolute;
  width: 200%;
  height: 200%;
  top: 0;
  left: 50%;
  transform: translate(-50%, -75%);
}
.wrapper19 button .wave:after {
  border-radius: 40%;
  background-color: rgba(51, 51, 51, 0.5);
  animation: wave 7s linear infinite;
}
.wrapper19 button .wave:after {
  border-radius: 45%;
  background-color: #333333;
  animation: wave 12s linear infinite;
}
@keyframes wave {
  0% {
    transform: translate(-50%, -75%) rotate(0deg);
  }
  100% {
    transform: translate(-50%, -75%) rotate(360deg);
  }
}

/* ИНТЕРЕСНЫЙ HOVER-ЭФФЕКТ КАРТОЧКИ. https://www.youtube.com/watch?v=8bDropEZmA4&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=20 */
.wrapper20 figure a, .wrapper20 figure figcaption {
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
}

.wrapper20 {
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  min-height: 100vh;
  background: linear-gradient(45deg, #00a9c5, #ffff7e);
}
.wrapper20 figure {
  position: relative;
  overflow: hidden;
  min-width: 320px;
  max-width: 480px;
  max-height: 360px;
  background-color: #9900ff;
  text-align: center;
  box-shadow: -1px 1px 15px -5px #010101;
  margin: 0;
}
.wrapper20 figure img {
  height: 390px;
  opacity: 0.8;
  transform: translate3d(0, -30px, 0);
  transition: opacity 0.35s, transform 0.35s;
}
.wrapper20 figure figcaption {
  box-sizing: border-box;
  padding: 60px;
  font-family: "Montserrat", sans-serif;
  color: #fff;
  font-size: 20px;
  text-shadow: 1px 1px 3px #010101;
}
.wrapper20 figure figcaption:after, .wrapper20 figure figcaption:before {
  pointer-events: none;
  position: absolute;
  content: "";
  opacity: 0;
  transition: opacity 0.35s, transform 0.35s;
}
.wrapper20 figure figcaption:after {
  top: 30px;
  right: 50px;
  bottom: 30px;
  left: 50px;
  border-right: 1px solid #fff;
  border-left: 1px solid #fff;
  transform: scale(1, 0);
  transform-origin: 100% 0;
}
.wrapper20 figure figcaption:before {
  top: 50px;
  right: 30px;
  bottom: 50px;
  left: 30px;
  border-top: 1px solid #fff;
  border-bottom: 1px solid #fff;
  transform: scale(0, 1);
  transform-origin: 0 0;
}
.wrapper20 figure h2 {
  text-align: center;
  text-transform: uppercase;
  margin: 0;
  padding-top: 25%;
  transition: transform 0.35s;
  transform: translate3d(0, -30px, 0);
}
.wrapper20 figure p {
  font-size: 14px;
  font-weight: 300;
  opacity: 0;
  transform: translate3d(0, 10px, 0);
  transition: opacity 0.5s, transform 0.4s;
}
.wrapper20 figure a {
  z-index: 1;
  font-size: 0;
  opacity: 0;
}
.wrapper20 figure:hover img {
  opacity: 0.7;
  transform: translate3d(0, 0, 0);
}
.wrapper20 figure:hover figcaption:after, .wrapper20 figure:hover figcaption:before {
  opacity: 1;
  transform: scale(1);
}
.wrapper20 figure:hover figcaption:after {
  transition-delay: 0.15s;
}
.wrapper20 figure:hover h2,
.wrapper20 figure:hover p {
  opacity: 1;
  transform: translate3d(0, 0, 0);
}
.wrapper20 figure:hover h2,
.wrapper20 figure:hover p,
.wrapper20 figure:hover img {
  transition-delay: 0.15s;
}

/* КРЕАТИВНАЯ КАРТОЧКА ПРОДУКТА. https://www.youtube.com/watch?v=T9Vq-8BXFXA&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=21 */
.wrapper21 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-evenly;
  min-height: 100vh;
  background: linear-gradient(45deg, #333, #5a5454);
}
.wrapper21 .card21 {
  font-family: "Montserrat", sans-serif;
  width: 190px;
  height: 240px;
  background: linear-gradient(240deg, #808080, #e6e6e6);
  border-radius: 20px;
  position: relative;
  text-transform: uppercase;
}
.wrapper21 .card21 .price {
  background: linear-gradient(45deg, #b066fe, #63e2ff);
}
.wrapper21 .picture {
  text-align: center;
}
.wrapper21 .picture img {
  position: relative;
  width: 80px;
  top: -10px;
  left: 45px;
  z-index: 1;
}
.wrapper21 .price {
  position: absolute;
  right: 0;
  bottom: 100px;
  width: 120px;
  height: 200px;
  border-radius: 20px 20px 0 2px;
  transform: skewY(40deg);
}
.wrapper21 .price span {
  position: absolute;
  top: 130px;
  left: 40px;
  font-size: 28px;
  color: #fff;
  font-weight: 700;
  transform: skewy(-40deg);
}
.wrapper21 .info {
  position: absolute;
  top: 45%;
  left: 10%;
}
.wrapper21 .info .icon {
  font-size: 12px;
  color: #606060;
  text-align: left;
  letter-spacing: 1px;
  position: absolute;
}
.wrapper21 .info .icon img {
  padding-left: 10px;
  width: 40px;
}
.wrapper21 .name {
  font-size: 14px;
  color: #606060;
  font-weight: 600;
  position: absolute;
  bottom: 20px;
  left: 20px;
  max-width: 80px;
}

/* АНИМИРОВАННЫЙ ЭФФЕКТ ГРАДИЕНТНОЙ ТЕНИ. https://www.youtube.com/watch?v=3naanA-_Krw&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=22 */
.wrapper22 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background-color: #000;
  position: relative;
  z-index: 0;
}

.shadow {
  position: relative;
  width: 500px;
  height: 350px;
  background: linear-gradient(#000, #262626);
}
.shadow img {
  position: absolute;
  width: 70px;
  height: 70px;
  right: 10px;
  bottom: 10px;
}
.shadow:before, .shadow:after {
  content: "";
  position: absolute;
  top: -2px;
  right: -2px;
  bottom: -2px;
  left: -2px;
  background: linear-gradient(45deg, #fb0094, #0000ff, #00ff00, #ffff00, #ff0000, #fb0094, #0000ff, #00ff00, #ffff00, #ff0000);
  background-size: 500%;
  z-index: -1;
  animation: animate 30s ease infinite;
}
.shadow:after {
  filter: blur(25px);
}
@keyframes animate {
  0% {
    background-position: 0 0;
  }
  50% {
    background-position: 300% 0;
  }
  100% {
    background-position: 0 0;
  }
}

/* ОРИГИНАЛЬНЫЙ HOVER-ЭФФЕКТ ЭЛЕМЕНТОВ МЕНЮ. https://www.youtube.com/watch?v=FTvMze67TTo&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=23 */
.wrapper23 nav ul li:before, .wrapper23 nav ul li:after, .wrapper23 nav ul li a:before {
  content: "";
  position: absolute;
  height: 33.33%;
  width: 0%;
  background-color: #fb872b;
  transition: 0.4s ease;
}

.wrapper23 {
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  min-height: 100vh;
  background: linear-gradient(45deg, #93278f, #00a99d);
}
.wrapper23 nav ul {
  list-style-type: none;
  padding: 0;
  display: flex;
  justify-content: space-around;
}
.wrapper23 nav ul li {
  position: relative;
  padding: 4px 15px;
  margin: 0 5px;
  height: 100%;
  display: flex;
  justify-content: space-around;
  align-items: center;
}
.wrapper23 nav ul li a {
  font-family: "Tomorrow", sans-serif;
  font-size: 24px;
  color: #fff;
  text-transform: uppercase;
  letter-spacing: 3px;
  text-decoration: none;
  padding: 10px 5px;
  transition: 0.4s ease;
  z-index: 1;
}
.wrapper23 nav ul li a:before {
  left: 0;
  bottom: 66.66%;
}
.wrapper23 nav ul li:after {
  right: 0;
  bottom: 33.33%;
}
.wrapper23 nav ul li:before {
  left: 0;
  bottom: 1%;
}
.wrapper23 nav ul li:hover a {
  text-shadow: 1px 1px 5px #000;
}
.wrapper23 nav ul li:hover a:before {
  width: 100%;
}
.wrapper23 nav ul li:hover:before, .wrapper23 nav ul li:hover:after {
  width: 100%;
}

/* АНИМАЦИЯ ГРАНИЦЫ КАРТОЧКИ ТОВАРА. https://www.youtube.com/watch?v=4eDhKnDhzb8&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=24 */
.wrapper24 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  /* radial-gradient() создает градиент в форме круга или эллипса. */
  background: radial-gradient(#ff0000, #000);
  font-family: "Mansalva", cursive;
}
.wrapper24 figure {
  width: 1000px;
  height: 500px;
  box-sizing: border-box;
  padding: 3em;
  position: relative;
}
.wrapper24 figure:before, .wrapper24 figure:after {
  content: "";
  width: 0;
  height: 0;
  /* inherit заставляет в элементе использовать значение свойства из родительского элемента. */
  box-sizing: inherit;
  border: 4px solid transparent;
  position: absolute;
  z-index: 0;
}
.wrapper24 figure:before {
  top: 0;
  left: 0;
}
.wrapper24 figure:after {
  bottom: 0;
  right: 0;
}
.wrapper24 figure:hover:before, .wrapper24 figure:hover:after {
  width: 100%;
  height: 100%;
}
.wrapper24 figure:hover:before {
  border-top-color: #ff0000;
  border-right-color: #ff0000;
  transition: width 0.25s ease, height 0.25s ease;
}
.wrapper24 figure:hover:after {
  border-bottom-color: #f07e7e;
  border-left-color: #f07e7e;
  transition: width 0.25s ease 0.5s, height 0.25s ease 0.75s, border-color 0s ease 0.5s;
}
.wrapper24 figure:hover h2 {
  left: 20%;
  z-index: 1;
}
.wrapper24 figure:hover button {
  left: 62%;
  z-index: 1;
}
.wrapper24 figure img {
  position: absolute;
  width: 350px;
  top: 45%;
  left: 22%;
  transform: translate(-50%, -50%);
  z-index: 2;
}
.wrapper24 figure figcaption {
  margin-top: 50px;
  position: relative;
  overflow: hidden;
}
.wrapper24 figure figcaption h2 {
  font-family: "Mansalva", cursive;
  font-size: 68px;
  color: #0c0c0c;
  text-shadow: 1px 1px 5px #ff0000;
  margin: 0 0 50px;
  position: relative;
  top: 10%;
  left: -50%;
  transition: 1s ease;
  text-align: center;
}
.wrapper24 figure figcaption h2 span {
  display: block;
  font-size: 14px;
  text-align: center;
}
.wrapper24 figure figcaption button {
  cursor: pointer;
  background-color: transparent;
  height: 45px;
  width: 140px;
  border: 2px solid #fff;
  color: #fff;
  font-size: 14px;
  letter-spacing: 2px;
  text-transform: uppercase;
  border-radius: 35px;
  position: relative;
  top: 0;
  left: 0;
  transition: 1s ease;
}
.wrapper24 figure figcaption button:hover {
  background-color: rgba(255, 255, 255, 0.4274509804);
}

/* СКОШЕННОЕ МЕНЮ С ИКОНКАМИ. https://www.youtube.com/watch?v=5dbRRfmNsss&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=25 */
.wrapper25 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: linear-gradient(225deg, #ffff7e, #00a8c5);
}
.wrapper25 figure {
  width: 450px;
  height: 300px;
  overflow: hidden;
  cursor: pointer;
  position: relative;
  box-shadow: 0 0 15px -5px #010101;
}
.wrapper25 figure img {
  height: 100%;
  width: 100%;
}
.wrapper25 figure figcaption {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 30px 40px;
}
.wrapper25 figure figcaption h2 {
  font-family: "Raleway", sans-serif;
  font-size: 30px;
  color: #d72ad1;
  letter-spacing: 2px;
  text-transform: uppercase;
  transform: translatey(20px);
  transition: 0.3s ease;
}
.wrapper25 figure figcaption ul {
  margin: 0;
  padding: 0;
  list-style-type: none;
  position: absolute;
  right: 15px;
  bottom: 30px;
  display: flex;
}
.wrapper25 figure figcaption ul li {
  margin: 0 15px;
  transform: translatey(80px);
}
.wrapper25 figure figcaption ul li:nth-child(1) {
  transition: 0.4s 0.05s;
}
.wrapper25 figure figcaption ul li:nth-child(2) {
  transition: 0.4s 0.1s;
}
.wrapper25 figure figcaption ul li:nth-child(3) {
  transition: 0.4s 0.15s;
}
.wrapper25 figure figcaption ul .icon {
  text-decoration: none;
  color: #fff;
  font-size: 30px;
  transition: 0.5s ease;
}
.wrapper25 figure figcaption ul .icon:hover {
  color: #a316d6;
}
.wrapper25 figure figcaption:before {
  content: "";
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  height: 0;
  background: rgba(0, 0, 0, 0.5);
  /* Свойство clip-path создаёт ограниченную область, которая определяет какая часть элемента должна быть видимой. 
  Те части, которые находятся внутри области, видимы, в то время как части вне области, скрыты. */
  /* Свойство polygon() принимает координаты нескольких точек, по которым нужно обрезать элемент. https://habr.com/ru/companies/skillfactory/articles/539064/ */
  -webkit-clip-path: polygon(0 100%, 100% 0, 100% 100%);
          clip-path: polygon(0 100%, 100% 0, 100% 100%);
  transition: 0.5s ease;
}
.wrapper25 figure figcaption:hover h2,
.wrapper25 figure figcaption:hover li {
  transform: translatey(0);
}
.wrapper25 figure figcaption:hover:before {
  height: 150px;
}

/* ПОЛЬЗОВАТЕЛЬСКИЙ АНИМИРОВАННЫЙ CHECKBOX. https://www.youtube.com/watch?v=tjMiFkQrHHQ&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=26 */
.wrapper26 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: radial-gradient(#00ffee, #d858ff);
}
.wrapper26 input {
  display: none;
}
.wrapper26 label {
  box-sizing: border-box;
  position: relative;
  width: 300px;
  height: 130px;
  padding: 7px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.6) inset;
  border-radius: 65px;
  cursor: pointer;
  background: linear-gradient(to right, #ed1c24 0, #ff5a2f 45%, #7fd03e 55%, #009e00 100%) 0 0;
  background-size: 650px 100%;
  transition: 0.3s ease;
}
.wrapper26 label:before {
  content: "Off";
  font-family: "Montserrat", sans-serif;
  width: 116px;
  height: 116px;
  position: absolute;
  left: 7px;
  top: 7px;
  background: radial-gradient(#fff, #f0f0f0);
  border-radius: 100%;
  text-align: center;
  line-height: 116px;
  font-size: 30px;
  color: #ed1c24;
  text-transform: uppercase;
  transition: left 0.3s ease, color 0.3s ease, transform 0.1s ease;
}
.wrapper26 label:active:before {
  transform: scale(0.9);
}
.wrapper26 input:checked + label {
  background-position-x: -350px;
}
.wrapper26 input:checked + label:before {
  content: "On";
  color: #009e00;
  left: 177px;
}

/* СТИЛЬНЫЙ ПОЛЬЗОВАТЕЛЬСКИЙ SCROLLBAR. https://www.youtube.com/watch?v=gv0tk3_Ou70&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=27 */
.wrapper27 {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: #101124;
  min-height: 100vh;
}

::-webkit-scrollbar {
  width: 25px;
  background-color: #101124;
}

::-webkit-scrollbar-track {
  border: 5px solid rgba(255, 255, 255, 0.25);
  box-shadow: inset 0 0 2.5px 2 rgba(0, 0, 0, 0.5);
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(45deg, #00ffa1, #00ffff);
  border-radius: 15px;
}

/* КРЕАТИВНАЯ КНОПКА-ПЕРЕКЛЮЧАТЕЛЬ. https://www.youtube.com/watch?v=puA9tOWt7V8&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=28 */
.wrapper28 {
  margin: 0;
  padding: 0;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: linear-gradient(45deg, #fca5f1, #b5ffff);
}
.wrapper28 input[type=radio] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}
.wrapper28 input[type=radio]:checked + label {
  background-color: #2e3192;
  color: #fff;
  box-shadow: -2px 2px 20px -8px #010101;
}
.wrapper28 label {
  height: 150px;
  width: 200px;
  margin: 50px;
  border: 5px solid #7578e7;
  border-radius: 20px;
  color: #2e3192;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: 0.3s ease;
}
.wrapper28 label .fa {
  font-size: 70px;
}
.wrapper28 label span {
  font-family: "Montserrat", sans-serif;
  letter-spacing: 1px;
  font-size: 12px;
  text-transform: uppercase;
  margin-top: 10px;
}

/* АНИМИРОВАННОЕ ОКНО ПОИСКА. https://www.youtube.com/watch?v=OG2zy0-sRe8&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=29 */
.wrapper29 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: linear-gradient(45deg, #00b7ff, #ffffc7);
}
.wrapper29 .search {
  display: flex;
  background: linear-gradient(45deg, #333, #5a5454);
  height: 50px;
  border-radius: 50px;
  padding: 5px;
}
.wrapper29 .search:hover input {
  width: 250px;
  padding: 0 10px;
}
.wrapper29 .search:hover button {
  background-color: #e6e6e6;
}
.wrapper29 .search input {
  border: none;
  background: none;
  outline: none;
  padding: 0;
  font-size: 18px;
  color: #fff;
  width: 0;
  transition: 0.4s;
}
.wrapper29 .search button {
  color: #00b7ff;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  border: none;
  background-color: #333;
  font-size: 20px;
  cursor: pointer;
  transition: 0.4s;
}

/* НЕОНОВЫЙ CHECKBOX. https://www.youtube.com/watch?v=E1byOJ9eOoE&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=30 */
.wrapper30 {
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  min-height: 100vh;
  background-color: #0f0f0f;
}
.wrapper30 label {
  position: relative;
  width: 290px;
  height: 290px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}
.wrapper30 label input {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}
.wrapper30 label input:checked ~ i {
  color: #00ffe7;
  text-shadow: 0 0 15px #00a1ff, 0 0 30px #00a1ff;
}
.wrapper30 label input:checked ~ span {
  box-shadow: 0 0 0 #000, inset 0 -5px 5px #000, inset 0 2px 2px #fff, 0 0 0 10px #000, 0 0 40px 10px #00a1ff, 0 0 0 10px #0f0f0f, 0 0 0 12px #00a1ff;
}
.wrapper30 label span {
  position: absolute;
  top: 0;
  left: 0;
  display: block;
  width: 100%;
  height: 100%;
  background-color: #1b1b1b;
  border-radius: 50%;
  box-shadow: 0 3px 4px #000, inset 0 -2px 5px #000, inset 0 2px 2px #fff, 0 0 0 2px #000, 0 0 0 5px #0f0f0f, 0 0 0 15px #080808;
}
.wrapper30 label .fa {
  z-index: 1;
  font-size: 10em;
}

/* СТИЛЬНЫЙ HOVER-ЭФФЕКТ КАРТОЧКИ. https://www.youtube.com/watch?v=-ZHXKSwFICE&list=PLNkWIWHIRwMEosiVP_3B-h4fE7CIfZ7pI&index=31 */
.wrapper31 {
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: linear-gradient(225deg, #6441a5, #2a0845);
}
.wrapper31 .subwrapper {
  position: relative;
  overflow: hidden;
  width: 400px;
  height: 300px;
  cursor: pointer;
  margin: 40px;
  border: 2px solid #000;
  box-shadow: 0 0 15px -5px #010101;
}
.wrapper31 .subwrapper img {
  width: auto;
  height: 100%;
}
.wrapper31 .subwrapper:before {
  position: absolute;
  content: "";
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url(background16.jpg);
  background-size: cover;
  filter: grayscale(100%);
  transition: all 0.5s ease;
}
.wrapper31 .subwrapper:hover:before {
  width: 0;
}/*# sourceMappingURL=style.css.map */