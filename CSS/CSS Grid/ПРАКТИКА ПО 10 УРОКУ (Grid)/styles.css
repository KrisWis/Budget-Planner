.container {
    display: grid;
    height: 100vh;
    grid-template-columns: minmax(150px, 200px) 1fr minmax(150px, 200px);
    /* Прибили наш footer к низу с помощью параметра auto. */
    grid-template-rows: auto 1fr auto;
    /* Свойство grid-template-areas определяет именованные области сетки (мы именовали их с помощью свойства grid-area),
    устанавливая ячейки в сетке. https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas */
    /* Так как у нас установлено 3 колонки, то мы указываем в каждой строке по 3 значения: 
    В первой строке везде стоит header, т.к он должен занимать всю ширину строки, т.е header располагается в каждой из 3 колонок.
    Во второй строке, в первой колонке у нас находиться nav, во второй main и в третьей aside.
    В третьей строке везде стоит footer, т.к он должен занимать всю ширину строки, т.е footer располагается в каждой из 3 колонок. */
    grid-template-areas: 
    "header header header"
    "nav main aside"
    "footer footer footer";
  }


/* Привязываем части размятки (header, nav, aside, main, footer) к grid-лейауту с помощью свойства grid-area 
для того, чтобы используя свойство grid-template-areas, к ним можно было обращаться. */
header {
    grid-area: header;
}

nav {
    grid-area: nav;
}

aside {
    grid-area: aside;
}

main {
    grid-area: main;
}

footer {
    grid-area: footer;
}

/* Задаём свойства элементам. */
.element {
    color: white
}
.element-1 {
    text-align: center;
    background-image: linear-gradient(white, black); 
}

.element-2 {
    background-image: linear-gradient(green, blue); 
}

.element-3 {
    background-image: linear-gradient(red, blue); 
}

.element-4 {
    background-image: linear-gradient(green, red); 
}

.element-5 {
    /* Делаем высоту 100%, чтобы не было пустого пространства. */
    height: 100%;
    background-image: linear-gradient(green, black); 
}

.element-6 {
    text-align: center;
    background-image: linear-gradient(black, blue); 
}


/* Делаем Responsive дизайн, если разрешение экрана меньше 510px. */
@media (max-width: 510px) {
    /* Делаем 2х-колоночный макет, вместо 3х-колоночного. */
    .container {
    grid-template-columns: repeat(2, 1fr);
    /* Так как теперь у нас 2х-колоночный макет, то задаём новые значения свойству grid-template-areas.*/
    grid-template-areas: 
    "header header"
    "nav main"
    "footer footer";
    }
    /* И убираем секцию aside. */
    aside {
        display: none
    }
}

/* Делаем Responsive дизайн, если разрешение экрана меньше 320px. */
@media (max-width: 320px) {
    /* Делаем 1-колоночный макет, вместо 3х-колоночного. */
    .container {
    /* Свойство grid-template-columns нужно задавать, чтобы колонка была во всю ширину экрана. */
    grid-template-columns: 1fr;
    /* Так как теперь у нас 1-колоночный макет, то задаём новые значения свойству grid-template-areas.*/
    grid-template-areas: 
    "header"
    "nav"
    "main"
    "footer";
    }

    /* Убираем секцию aside. */
    aside {
        display: none
    }
}