'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(inorderTraversal);
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var DEFAULT_DEGREE = 6; // min degree of b-tree.
// All vertices except the root have [degree ... 2 * degree] child nodes
// And [degree - 1 ... 2 * degree - 1] + 1 "empty" elements
var Element = /*#__PURE__*/_createClass(function Element(key, data) {
  var child = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  _classCallCheck(this, Element);
  this.key = key;
  this.data = data;
  this.child = child;
});
var empty = function empty(child) {
  return new Element(undefined, undefined, child);
};
var splitNode = function splitNode(parent, index) {
  var node = parent[index].child;
  var len = node.length;
  var newLeftNode = node.splice(0, len / 2 - 1); // First half
  var mid = node.shift();
  newLeftNode.push(empty(mid.child));
  mid.child = newLeftNode;
  parent.splice(index, 0, mid);
  return parent;
};
var isLeaf = function isLeaf(node) {
  return !node[0].child;
};
var binarySearch = function binarySearch(node, key) {
  var start = 0;
  var end = node.length - 1;
  while (start <= end) {
    var i = start + end >> 1;
    var itemKey = node[i].key;
    if (key > itemKey) start = i + 1;else if (itemKey === undefined || key < itemKey) end = i - 1;else return [true, i];
  }
  return [false, start];
};
function inorderTraversal(start, finish, currNode) {
  var startIndex, finishIndex, currIndex, _currIndex, currElement;
  return _regeneratorRuntime().wrap(function inorderTraversal$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        startIndex = start === undefined ? 0 : binarySearch(currNode, start)[1];
        finishIndex = finish === undefined ? currNode.length - 1 : binarySearch(currNode, finish)[1];
        if (!isLeaf(currNode)) {
          _context.next = 12;
          break;
        }
        currIndex = startIndex;
      case 4:
        if (!(currIndex < finishIndex)) {
          _context.next = 10;
          break;
        }
        _context.next = 7;
        return currNode[currIndex].data;
      case 7:
        currIndex++;
        _context.next = 4;
        break;
      case 10:
        _context.next = 22;
        break;
      case 12:
        _currIndex = startIndex;
      case 13:
        if (!(_currIndex < finishIndex)) {
          _context.next = 21;
          break;
        }
        currElement = currNode[_currIndex];
        return _context.delegateYield(inorderTraversal(start, finish, currElement.child), "t0", 16);
      case 16:
        _context.next = 18;
        return currElement.data;
      case 18:
        _currIndex++;
        _context.next = 13;
        break;
      case 21:
        return _context.delegateYield(inorderTraversal(start, finish, currNode[finishIndex].child), "t1", 22);
      case 22:
      case "end":
        return _context.stop();
    }
  }, _marked);
}
var joinNodes = function joinNodes(parent, firstNodeIndex, secondNodeIndex) {
  var firstNode = parent[firstNodeIndex].child;
  var secondNode = parent[secondNodeIndex].child;
  var mid = parent.splice(firstNodeIndex, 1)[0];
  mid.child = firstNode.pop().child;
  secondNode.splice.apply(secondNode, [0, 0].concat(_toConsumableArray(firstNode), [mid]));
  return secondNode;
};
var growChild = function growChild(parent, childIndex) {
  var parentElement = parent[childIndex];
  var node = parentElement.child;
  var minDegree = node.length;
  if (childIndex > 0) {
    // If we have left neighbor
    var leftNeighbor = parent[childIndex - 1].child;
    if (leftNeighbor.length > minDegree) {
      var extractedElement = leftNeighbor.splice(leftNeighbor.length - 2, 1)[0];
      var insertedElement = new Element(parent[childIndex - 1].key, parent[childIndex - 1].data, leftNeighbor[leftNeighbor.length - 1].child);
      leftNeighbor[leftNeighbor.length - 1].child = extractedElement.child;
      extractedElement.child = leftNeighbor;
      parent.splice(childIndex - 1, 1, extractedElement);
      node.unshift(insertedElement);
      return node;
    }
  }
  if (childIndex < parent.length - 1) {
    // If we have right neighbor
    // parent.length - 1 means that we now on the rightmost element
    var rightNeighbor = parent[childIndex + 1].child;
    if (rightNeighbor.length > minDegree) {
      var _extractedElement = rightNeighbor.shift();
      var _insertedElement = new Element(parentElement.key, parentElement.data, node[node.length - 1].child);
      node[node.length - 1].child = _extractedElement.child;
      _extractedElement.child = node;
      parent.splice(childIndex, 1, _extractedElement);
      node.splice(node.length - 1, 0, _insertedElement);
      return node;
    }
    return joinNodes(parent, childIndex, childIndex + 1);
  }
  return joinNodes(parent, childIndex - 1, childIndex);
};

// Get the minimal upper, or the maximum lover node for some given node
//   node - some given node
//   minDegree - value of bTree.minDegree for tree
//   upper - boolean: true - upperLimit, false - lowerLimit
// Result: upperLimit or lowerLimit node
var extractLimit = function extractLimit(node, minDegree, upper) {
  var currNode = node;
  while (!isLeaf(currNode)) {
    var _index = upper ? 0 : currNode.length - 1;
    var nextNode = currNode[_index].child;
    if (nextNode.length === minDegree) {
      nextNode = growChild(currNode, _index);
    }
    currNode = nextNode;
  }
  var index = upper ? 0 : currNode.length - 2;
  return currNode.splice(index, 1)[0];
};
var deleteElement = function deleteElement(node, elementIndex, minDegree) {
  var element = node[elementIndex];
  var deletedData = element.data;
  var leftChild = element.child;
  var rightChild = node[elementIndex + 1].child;
  if (isLeaf(node)) {
    return node.splice(elementIndex, 1)[0].data;
  }
  if (leftChild.length > minDegree) {
    var lowerLimit = extractLimit(leftChild, minDegree, false);
    element.key = lowerLimit.key;
    element.data = lowerLimit.data;
  } else if (rightChild.length > minDegree) {
    var upperLimit = extractLimit(rightChild, minDegree, true);
    element.key = upperLimit.key;
    element.data = upperLimit.data;
  } else {
    joinNodes(node, elementIndex, elementIndex + 1);
    rightChild.splice(minDegree - 1, 1);
  }
  return deletedData;
};
var BTree = /*#__PURE__*/function () {
  function BTree() {
    var degree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_DEGREE;
    _classCallCheck(this, BTree);
    this.root = [empty()];
    this.minDegree = degree;
  }
  _createClass(BTree, [{
    key: "get",
    value: function get(key) {
      var currNode = this.root;
      while (currNode) {
        var _binarySearch = binarySearch(currNode, key),
          _binarySearch2 = _slicedToArray(_binarySearch, 2),
          found = _binarySearch2[0],
          i = _binarySearch2[1];
        if (found) {
          return currNode[i].data;
        }
        currNode = currNode[i].child;
      }
      var result = undefined;
      return result;
    }
  }, {
    key: "set",
    value: function set(key, data) {
      var newElement = new Element(key, data);
      if (this.root.length === 1) {
        this.root.unshift(newElement);
        return this;
      }
      if (this.root.length === this.minDegree * 2) {
        this.root = [empty(this.root)];
        splitNode(this.root, 0);
      }
      var currNode = this.root;
      while (true) {
        var _binarySearch3 = binarySearch(currNode, key),
          _binarySearch4 = _slicedToArray(_binarySearch3, 2),
          found = _binarySearch4[0],
          nextNodeIndex = _binarySearch4[1];
        if (found) {
          currNode[nextNodeIndex].data = data;
          return this;
        }
        if (isLeaf(currNode)) {
          currNode.splice(nextNodeIndex, 0, newElement);
          return this;
        }
        var nextNode = currNode[nextNodeIndex].child;
        if (nextNode.length === this.minDegree * 2) {
          splitNode(currNode, nextNodeIndex);
          var element = currNode[nextNodeIndex];
          if (element.key === key) {
            element.data = data;
            return this;
          }
          if (element.key > key) {
            nextNode = element.child;
          }
        }
        currNode = nextNode;
      }
    }
  }, {
    key: "iterator",
    value: function iterator(start, finish) {
      return inorderTraversal(start, finish, this.root);
    }
  }, {
    key: "remove",
    value: function remove(key) {
      var currNode = this.root;
      while (currNode) {
        var _binarySearch5 = binarySearch(currNode, key),
          _binarySearch6 = _slicedToArray(_binarySearch5, 2),
          found = _binarySearch6[0],
          index = _binarySearch6[1];
        if (found) {
          var deletedData = deleteElement(currNode, index, this.minDegree);
          if (this.root.length === 1 && this.root[0].child) {
            this.root = this.root[0].child;
          }
          return deletedData;
        } else {
          var nextNode = currNode[index].child;
          if (nextNode && nextNode.length === this.minDegree) {
            nextNode = growChild(currNode, index);
          }
          currNode = nextNode;
        }
      }
      if (this.root.length === 1 && this.root[0].child) {
        this.root = this.root[0].child;
      }
      var result = undefined;
      return result;
    }
  }]);
  return BTree;
}();
module.exports = {
  BTree: BTree
};