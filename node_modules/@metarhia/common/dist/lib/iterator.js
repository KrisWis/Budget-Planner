/* eslint-disable no-use-before-define */

'use strict';

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var toIterator = function toIterator(base) {
  if (!base[Symbol.iterator]) {
    throw new TypeError('Base is not Iterable');
  }
  return base[Symbol.iterator]();
};
var Iterator = /*#__PURE__*/function (_Symbol$iterator) {
  function Iterator(base) {
    _classCallCheck(this, Iterator);
    this.base = toIterator(base);
  }
  _createClass(Iterator, [{
    key: _Symbol$iterator,
    value: function value() {
      return this;
    }
  }, {
    key: "next",
    value: function next() {
      return this.base.next();
    }
  }, {
    key: "count",
    value: function count() {
      var count = 0;
      while (!this.next().done) {
        count++;
      }
      return count;
    }
  }, {
    key: "each",
    value: function each(fn, thisArg) {
      this.forEach(fn, thisArg);
    }
  }, {
    key: "forEach",
    value: function forEach(fn, thisArg) {
      var _iterator = _createForOfIteratorHelper(this),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;
          fn.call(thisArg, value);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "every",
    value: function every(predicate, thisArg) {
      var _iterator2 = _createForOfIteratorHelper(this),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var value = _step2.value;
          if (!predicate.call(thisArg, value)) {
            return false;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return true;
    }
  }, {
    key: "find",
    value: function find(predicate, thisArg) {
      var _iterator3 = _createForOfIteratorHelper(this),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var value = _step3.value;
          if (predicate.call(thisArg, value)) {
            return value;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var result = undefined;
      return result;
    }

    // Finds first non-nullable value in this iterator
    // Signature: [defaultValue]
    //   defaultValue <any> value to return if this iterator doesn't have
    //       non-nullable values
    //   Returns: first non-nullable value or <defaultValue>
  }, {
    key: "firstNonNullable",
    value: function firstNonNullable(defaultValue) {
      var _iterator4 = _createForOfIteratorHelper(this),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var value = _step4.value;
          if (value !== undefined && value !== null) return value;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      return defaultValue;
    }
  }, {
    key: "includes",
    value: function includes(element) {
      var _iterator5 = _createForOfIteratorHelper(this),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var value = _step5.value;
          if (value === element || Number.isNaN(value) && Number.isNaN(element)) {
            return true;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      return false;
    }
  }, {
    key: "reduce",
    value: function reduce(reducer, initialValue) {
      var result = initialValue;
      if (result === undefined) {
        var next = this.next();
        if (next.done) {
          throw new TypeError('Reduce of consumed iterator with no initial value');
        }
        result = next.value;
      }
      var _iterator6 = _createForOfIteratorHelper(this),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var value = _step6.value;
          result = reducer(result, value);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return result;
    }
  }, {
    key: "some",
    value: function some(predicate, thisArg) {
      var _iterator7 = _createForOfIteratorHelper(this),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var value = _step7.value;
          if (predicate.call(thisArg, value)) {
            return true;
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return false;
    }
  }, {
    key: "someCount",
    value: function someCount(predicate, count, thisArg) {
      var n = 0;
      var _iterator8 = _createForOfIteratorHelper(this),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var value = _step8.value;
          if (predicate.call(thisArg, value)) {
            if (++n === count) return true;
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      return false;
    }
  }, {
    key: "collectTo",
    value: function collectTo(CollectionClass) {
      return new CollectionClass(this);
    }
  }, {
    key: "collectWith",
    value: function collectWith(obj, collector) {
      this.forEach(function (element) {
        return collector(obj, element);
      });
      return obj;
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return Array.from(this);
    }

    // Transforms an iterator of key-value pairs into an object.
    // This is similar to what `{Object.fromEntries()}` would offer.
  }, {
    key: "toObject",
    value: function toObject() {
      return this.collectWith({}, function (obj, _ref) {
        var key = _ref[0],
          val = _ref[1];
        obj[key] = val;
      });
    }
  }, {
    key: "map",
    value: function map(mapper, thisArg) {
      return new MapIterator(this, mapper, thisArg);
    }
  }, {
    key: "filter",
    value: function filter(predicate, thisArg) {
      return new FilterIterator(this, predicate, thisArg);
    }

    // Creates an iterator that both filters and maps with the passed `mapper`.
    // This iterator will call `mapper` on each element and if mapper returns
    // NOT `filterValue` it will be returned, otherwise it is ignored.
    // Signature: mapper[, thisArg[, filterValue]]
    //   mapper <Function> function that maps values and returns either new value
    //       that will be the next value of the new iterator or `filterValue`
    //       that will be ignored.
    //     value <any> iterator element
    //   thisArg <any> value to be used as `this` when calling `mapper`
    //   filterValue <any> value to filter out `mapper` results.
  }, {
    key: "filterMap",
    value: function filterMap(mapper, thisArg, filterValue) {
      return new FilterMapIterator(this, mapper, thisArg, filterValue);
    }
  }, {
    key: "flat",
    value: function flat() {
      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new FlatIterator(this, depth);
    }
  }, {
    key: "flatMap",
    value: function flatMap(mapper, thisArg) {
      return new FlatMapIterator(this, mapper, thisArg);
    }
  }, {
    key: "zip",
    value: function zip() {
      for (var _len = arguments.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {
        iterators[_key] = arguments[_key];
      }
      return new ZipIterator(this, iterators);
    }
  }, {
    key: "chain",
    value: function chain() {
      for (var _len2 = arguments.length, iterators = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        iterators[_key2] = arguments[_key2];
      }
      return new ChainIterator(this, iterators);
    }
  }, {
    key: "take",
    value: function take(amount) {
      return new TakeIterator(this, amount);
    }
  }, {
    key: "takeWhile",
    value: function takeWhile(predicate, thisArg) {
      return new TakeWhileIterator(this, predicate, thisArg);
    }
  }, {
    key: "skip",
    value: function skip(amount) {
      for (var i = 0; i < amount; i++) {
        this.next();
      }
      return this;
    }
  }, {
    key: "skipWhile",
    value: function skipWhile(predicate, thisArg) {
      return new SkipWhileIterator(this, predicate, thisArg);
    }

    // Consumes an iterator, partitioning it into Arrays
    // Signature: predicate[, thisArg]
    //   predicate <Function> function returns a value to partition this iterator
    //     value <any> current iterator element
    //     Returns: <boolean> | <number> key denoting resulting partition this
    //         value will be assigned to. Number denotes index in the resulting
    //         array. Boolean will be cast to number
    //   thisArg <any> value to be used as `this` when calling `predicate`
    //   Returns: <Array> array of partitions (arrays), will always have at
    //       least 2 arrays in it
  }, {
    key: "partition",
    value: function partition(predicate, thisArg) {
      var result = [[], []];
      var _iterator9 = _createForOfIteratorHelper(this),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var value = _step9.value;
          var res = predicate.call(thisArg, value);
          var index = typeof res === 'number' ? res : Number(res);
          if (result.length <= index) {
            var oldLength = result.length;
            result.length = index + 1;
            for (var i = oldLength; i < result.length; i++) {
              result[i] = [];
            }
          }
          result[index].push(value);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      return result;
    }
  }, {
    key: "enumerate",
    value: function enumerate() {
      return new EnumerateIterator(this);
    }

    // Consumes an iterator grouping values by keys
    // Signature: classifier[, thisArg]
    //   classifier <Function> gets value to group by
    //     value <any> current iterator value
    //     Returns: <any> value to group by
    //   thisArg <any> value to be used as `this` when calling `classifier`
    //   Returns: <Map> map with arrays of iterator values grouped
    //       by keys returned by `classifier`
  }, {
    key: "groupBy",
    value: function groupBy(classifier, thisArg) {
      var map = new Map();
      var _iterator10 = _createForOfIteratorHelper(this),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var value = _step10.value;
          var key = classifier.call(thisArg, value);
          var collection = map.get(key);
          if (!collection) map.set(key, [value]);else collection.push(value);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      return map;
    }

    // Consumes an iterator returning last iterator value
    // Signature: [defaultValue]
    //   defaultValue <any> value to be used if iterator is empty
    // Returns: <any> | <undefined> last value of this iterator or <undefined>
  }, {
    key: "last",
    value: function last(defaultValue) {
      var result = defaultValue;
      var _iterator11 = _createForOfIteratorHelper(this),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var value = _step11.value;
          result = value;
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      return result;
    }
  }, {
    key: "join",
    value: function join() {
      var sep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ',';
      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var result = prefix;
      var _this$next = this.next(),
        done = _this$next.done,
        value = _this$next.value;
      if (!done) {
        result += value;
        var _iterator12 = _createForOfIteratorHelper(this),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var _value = _step12.value;
            result += sep + _value;
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
      return result + suffix;
    }

    // Find value in this iterator by comparing every value with
    // the found one using `comparator`
    // Signature: comparator[, accessor[, thisArg]]
    //   comparator <Function> returns `true` if new value should be accepted
    //     currValue <any> current value, starts with undefined
    //     nextValue <any> next value
    //     Returns: <boolean> `true` if next value should be accepted
    //   accessor <Function> gets value to compare by, current iterator value
    //       is used by default
    //     value <any> current iterator value
    //     Returns: <any> value to compare by
    //   thisArg <any> value to be used as `this` when calling `accessor` and
    //       `comparator`
    // Returns: last iterator value where `comparator` returned `true`,
    //     <undefined> by default
  }, {
    key: "findCompare",
    value: function findCompare(comparator, accessor, thisArg) {
      var res = undefined;
      var resCompareBy = undefined;
      var _iterator13 = _createForOfIteratorHelper(this),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var value = _step13.value;
          var compareBy = accessor ? accessor.call(thisArg, value) : value;
          if (comparator.call(thisArg, resCompareBy, compareBy)) {
            resCompareBy = compareBy;
            res = value;
          }
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      return res;
    }

    // Find the maximum value in this iterator
    // Signature: [accessor[, thisArg]]
    //   accessor <Function> gets value to compare by, current iterator value
    //       is used by default
    //     value <any> current iterator value
    //     Returns: <any> value to compare by
    //   thisArg <any> value to be used as `this` when calling `accessor`
    // Returns: element with maximum value or <undefined> if iterator is empty
  }, {
    key: "max",
    value: function max(accessor, thisArg) {
      return this.findCompare(function (curr, next) {
        return curr === undefined || next > curr;
      }, accessor, thisArg);
    }

    // Find the minimum value in this iterator
    // Signature: [accessor[, thisArg]]
    //   accessor <Function> gets value to compare by, current iterator value
    //       is used by default
    //     value <any> current iterator value
    //     Returns: <any> value to compare by
    //   thisArg <any> value to be used as `this` when calling `accessor`
    // Returns: element with minimum value or <undefined> if iterator is empty
  }, {
    key: "min",
    value: function min(accessor, thisArg) {
      return this.findCompare(function (curr, next) {
        return curr === undefined || next < curr;
      }, accessor, thisArg);
    }

    // Call a function with `this`. Will be equivalent to calling `fn(it)`.
    //   fn <Function>
    //     this <Iterator>
    // Returns: the result of `fn(this)` call.
  }, {
    key: "apply",
    value: function apply(fn) {
      return fn(this);
    }

    // Call a function with `this` and wrap the result in an Iterator.
    //   fn <Function>
    //     this <Iterator>
    // Returns: <Iterator> result of `fn(this)` wrapped in an Iterator.
    //
    // Example:
    // iter([1, 2])
    //   .chainApply(([a, b]) => [a + b, a - b])
    //   .join(', ');
    // Result: '3, -1'
  }, {
    key: "chainApply",
    value: function chainApply(fn) {
      var res = fn(this);
      return iter(res && res[Symbol.iterator] ? res : [res]);
    }

    // Create iterator by zipping multiple provided iterators into one
    // Signature: ...iterators
    //   iterators <Array>
    // Returns: <Iterator>
  }], [{
    key: "zip",
    value: function zip(base) {
      for (var _len3 = arguments.length, iterators = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        iterators[_key3 - 1] = arguments[_key3];
      }
      return new ZipIterator(toIterator(base), iterators);
    }

    // Create iterator iterating over the range
    // Signature: start, stop[, step]
    //   start <number>
    //   stop <number>
    //   step <number> (optional), default: `1`
    //
    // Returns: <Iterator>
  }, {
    key: "range",
    value: function range(start, stop, step) {
      return new Iterator(rangeGenerator(start, stop, step));
    }

    // Create iterator over indices of an array
    //   arr <Array> array-like object to create indices from
    // Returns: <Iterator>
  }, {
    key: "indices",
    value: function indices(arr) {
      return Iterator.range(0, arr.length);
    }
  }]);
  return Iterator;
}(Symbol.iterator);
Object.defineProperty(Iterator.prototype, Symbol.toStringTag, {
  value: 'Metarhia Iterator',
  writable: false,
  enumerable: false,
  configurable: true
});
function rangeGenerator(start, stop) {
  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (stop === undefined) {
            stop = start;
            start = 0;
          }
        case 1:
          if (!true) {
            _context.next = 9;
            break;
          }
          if (!(step > 0 && start >= stop || step < 0 && start <= stop)) {
            _context.next = 4;
            break;
          }
          return _context.abrupt("return");
        case 4:
          _context.next = 6;
          return start;
        case 6:
          start += step;
          _context.next = 1;
          break;
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })();
}
var MapIterator = /*#__PURE__*/function (_Iterator) {
  _inherits(MapIterator, _Iterator);
  var _super = _createSuper(MapIterator);
  function MapIterator(base, mapper, thisArg) {
    var _this;
    _classCallCheck(this, MapIterator);
    _this = _super.call(this, base);
    _this.mapper = mapper;
    _this.thisArg = thisArg;
    return _this;
  }
  _createClass(MapIterator, [{
    key: "next",
    value: function next() {
      var _this$base$next = this.base.next(),
        done = _this$base$next.done,
        value = _this$base$next.value;
      return {
        done: done,
        value: done ? undefined : this.mapper.call(this.thisArg, value)
      };
    }
  }]);
  return MapIterator;
}(Iterator);
var FilterIterator = /*#__PURE__*/function (_Iterator2) {
  _inherits(FilterIterator, _Iterator2);
  var _super2 = _createSuper(FilterIterator);
  function FilterIterator(base, predicate, thisArg) {
    var _this2;
    _classCallCheck(this, FilterIterator);
    _this2 = _super2.call(this, base);
    _this2.predicate = predicate;
    _this2.thisArg = thisArg;
    return _this2;
  }
  _createClass(FilterIterator, [{
    key: "next",
    value: function next() {
      var _iterator14 = _createForOfIteratorHelper(this.base),
        _step14;
      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var value = _step14.value;
          if (this.predicate.call(this.thisArg, value)) {
            return {
              done: false,
              value: value
            };
          }
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
      return {
        done: true,
        value: undefined
      };
    }
  }]);
  return FilterIterator;
}(Iterator);
var FilterMapIterator = /*#__PURE__*/function (_Iterator3) {
  _inherits(FilterMapIterator, _Iterator3);
  var _super3 = _createSuper(FilterMapIterator);
  function FilterMapIterator(base, mapper, thisArg, filterValue) {
    var _this3;
    _classCallCheck(this, FilterMapIterator);
    _this3 = _super3.call(this, base);
    _this3.mapper = mapper;
    _this3.thisArg = thisArg;
    _this3.filterValue = filterValue;
    return _this3;
  }
  _createClass(FilterMapIterator, [{
    key: "next",
    value: function next() {
      var _iterator15 = _createForOfIteratorHelper(this.base),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var value = _step15.value;
          var nextValue = this.mapper.call(this.thisArg, value);
          if (nextValue !== this.filterValue) {
            return {
              done: false,
              value: nextValue
            };
          }
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      return {
        done: true,
        value: undefined
      };
    }
  }]);
  return FilterMapIterator;
}(Iterator);
var FlatIterator = /*#__PURE__*/function (_Iterator4) {
  _inherits(FlatIterator, _Iterator4);
  var _super4 = _createSuper(FlatIterator);
  function FlatIterator(base, depth) {
    var _this4;
    _classCallCheck(this, FlatIterator);
    _this4 = _super4.call(this, base);
    _this4.currentDepth = 0;
    _this4.stack = new Array(depth + 1);
    _this4.stack[0] = base;
    return _this4;
  }
  _createClass(FlatIterator, [{
    key: "next",
    value: function next() {
      while (this.currentDepth >= 0) {
        var top = this.stack[this.currentDepth];
        var next = top.next();
        if (next.done) {
          this.stack[this.currentDepth] = null;
          this.currentDepth--;
          continue;
        }
        if (this.currentDepth === this.stack.length - 1 || !next.value[Symbol.iterator]) {
          return next;
        }
        this.stack[++this.currentDepth] = next.value[Symbol.iterator]();
      }
      return {
        done: true,
        value: undefined
      };
    }
  }]);
  return FlatIterator;
}(Iterator);
var FlatMapIterator = /*#__PURE__*/function (_Iterator5) {
  _inherits(FlatMapIterator, _Iterator5);
  var _super5 = _createSuper(FlatMapIterator);
  function FlatMapIterator(base, mapper, thisArg) {
    var _this5;
    _classCallCheck(this, FlatMapIterator);
    _this5 = _super5.call(this, base);
    _this5.mapper = mapper;
    _this5.thisArg = thisArg;
    _this5.currentIterator = null;
    return _this5;
  }
  _createClass(FlatMapIterator, [{
    key: "next",
    value: function next() {
      if (!this.currentIterator) {
        var _next = this.base.next();
        if (_next.done) {
          return _next;
        }
        var value = this.mapper.call(this.thisArg, _next.value);
        if (!value[Symbol.iterator]) {
          return {
            done: false,
            value: value
          };
        }
        this.currentIterator = toIterator(value);
      }
      var next = this.currentIterator.next();
      if (next.done) {
        this.currentIterator = null;
        return this.next();
      }
      return next;
    }
  }]);
  return FlatMapIterator;
}(Iterator);
var TakeIterator = /*#__PURE__*/function (_Iterator6) {
  _inherits(TakeIterator, _Iterator6);
  var _super6 = _createSuper(TakeIterator);
  function TakeIterator(base, amount) {
    var _this6;
    _classCallCheck(this, TakeIterator);
    _this6 = _super6.call(this, base);
    _this6.amount = amount;
    _this6.iterated = 0;
    return _this6;
  }
  _createClass(TakeIterator, [{
    key: "next",
    value: function next() {
      this.iterated++;
      if (this.iterated <= this.amount) {
        return this.base.next();
      }
      return {
        done: true,
        value: undefined
      };
    }
  }]);
  return TakeIterator;
}(Iterator);
var TakeWhileIterator = /*#__PURE__*/function (_Iterator7) {
  _inherits(TakeWhileIterator, _Iterator7);
  var _super7 = _createSuper(TakeWhileIterator);
  function TakeWhileIterator(base, predicate, thisArg) {
    var _this7;
    _classCallCheck(this, TakeWhileIterator);
    _this7 = _super7.call(this, base);
    _this7.predicate = predicate;
    _this7.thisArg = thisArg;
    _this7.done = false;
    return _this7;
  }
  _createClass(TakeWhileIterator, [{
    key: "next",
    value: function next() {
      if (this.done) return {
        done: true,
        value: undefined
      };
      var next = this.base.next();
      if (!next.done && this.predicate.call(this.thisArg, next.value)) {
        return next;
      }
      this.done = true;
      return {
        done: true,
        value: undefined
      };
    }
  }]);
  return TakeWhileIterator;
}(Iterator);
var ZipIterator = /*#__PURE__*/function (_Iterator8) {
  _inherits(ZipIterator, _Iterator8);
  var _super8 = _createSuper(ZipIterator);
  function ZipIterator(base, iterators) {
    var _this8;
    _classCallCheck(this, ZipIterator);
    _this8 = _super8.call(this, base);
    _this8.iterators = iterators.map(toIterator);
    return _this8;
  }
  _createClass(ZipIterator, [{
    key: "next",
    value: function next() {
      var result = [];
      var next = this.base.next();
      if (next.done) {
        return next;
      }
      result.push(next.value);
      var _iterator16 = _createForOfIteratorHelper(this.iterators),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var iterator = _step16.value;
          var _next2 = iterator.next();
          if (_next2.done) {
            return _next2;
          }
          result.push(_next2.value);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      return {
        done: false,
        value: result
      };
    }
  }]);
  return ZipIterator;
}(Iterator);
var ChainIterator = /*#__PURE__*/function (_Iterator9) {
  _inherits(ChainIterator, _Iterator9);
  var _super9 = _createSuper(ChainIterator);
  function ChainIterator(base, iterators) {
    var _this9;
    _classCallCheck(this, ChainIterator);
    _this9 = _super9.call(this, base);
    _this9.currentIterator = base;
    _this9.iterators = iterators.map(toIterator)[Symbol.iterator]();
    return _this9;
  }
  _createClass(ChainIterator, [{
    key: "next",
    value: function next() {
      var next = this.currentIterator.next();
      if (!next.done) {
        return next;
      }
      var iterator = this.iterators.next();
      if (iterator.done) {
        return iterator;
      }
      this.currentIterator = iterator.value;
      return this.next();
    }
  }]);
  return ChainIterator;
}(Iterator);
var EnumerateIterator = /*#__PURE__*/function (_Iterator10) {
  _inherits(EnumerateIterator, _Iterator10);
  var _super10 = _createSuper(EnumerateIterator);
  function EnumerateIterator(base) {
    var _this10;
    _classCallCheck(this, EnumerateIterator);
    _this10 = _super10.call(this, base);
    _this10.index = 0;
    return _this10;
  }
  _createClass(EnumerateIterator, [{
    key: "next",
    value: function next() {
      var next = this.base.next();
      if (next.done) {
        return next;
      }
      return {
        done: false,
        value: [this.index++, next.value]
      };
    }
  }]);
  return EnumerateIterator;
}(Iterator);
var SkipWhileIterator = /*#__PURE__*/function (_Iterator11) {
  _inherits(SkipWhileIterator, _Iterator11);
  var _super11 = _createSuper(SkipWhileIterator);
  function SkipWhileIterator(base, predicate, thisArg) {
    var _this11;
    _classCallCheck(this, SkipWhileIterator);
    _this11 = _super11.call(this, base);
    _this11.predicate = predicate;
    _this11.thisArg = thisArg;
    _this11.doneSkipping = false;
    return _this11;
  }
  _createClass(SkipWhileIterator, [{
    key: "next",
    value: function next() {
      var next = this.base.next();
      if (this.doneSkipping) return next;
      while (!next.done && this.predicate.call(this.thisArg, next.value)) {
        next = this.base.next();
      }
      this.doneSkipping = true;
      return next;
    }
  }]);
  return SkipWhileIterator;
}(Iterator);
var iter = function iter(base) {
  return new Iterator(base);
};
module.exports = {
  Iterator: Iterator,
  iter: iter,
  iterEntries: function iterEntries(obj) {
    return iter(Object.entries(obj));
  },
  iterKeys: function iterKeys(obj) {
    return iter(Object.keys(obj));
  },
  iterValues: function iterValues(obj) {
    return iter(Object.values(obj));
  }
};