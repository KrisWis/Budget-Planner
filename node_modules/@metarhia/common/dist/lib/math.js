'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var crypto = require('crypto');
var CryptoRandomPrefetcher = /*#__PURE__*/function (_Symbol$iterator) {
  function CryptoRandomPrefetcher(bufSize, valueSize) {
    _classCallCheck(this, CryptoRandomPrefetcher);
    if (bufSize % valueSize !== 0) {
      throw new RangeError('buffer size must be a multiple of value size');
    }
    this.buf = crypto.randomBytes(bufSize);
    this.pos = 0;
    this.vsz = valueSize;
  }

  // Return Buffer with next `valueSize` random bytes.
  _createClass(CryptoRandomPrefetcher, [{
    key: "next",
    value: function next() {
      if (this.pos === this.buf.length) {
        this.pos = 0;
        crypto.randomFillSync(this.buf);
      }
      var end = this.pos + this.vsz;
      var buf = this.buf.slice(this.pos, end);
      this.pos = end;
      return buf;
    }
  }, {
    key: _Symbol$iterator,
    value: function value() {
      var _this = this,
        _ref;
      return _ref = {}, _defineProperty(_ref, Symbol.iterator, function () {
        return this;
      }), _defineProperty(_ref, "next", function next() {
        return {
          value: _this.next(),
          done: false
        };
      }), _ref;
    }
  }]);
  return CryptoRandomPrefetcher;
}(Symbol.iterator); // Create prefetcher to use when crypto.randomBytes is required to generate
// multiple same-size values. `bufSize` must be a multiple of `valueSize` for
// this to work.
//   bufSize - <number>, size in bytes of the buffer to preallocate
//   valueSize - <number>, size in bytes of the produced chunks
var cryptoPrefetcher = function cryptoPrefetcher(bufSize, valueSize) {
  return new CryptoRandomPrefetcher(bufSize, valueSize);
};

// Generate random integer value in given range
//   min - <number>, range start
//   max - <number>, range end
// Returns: <number>
var random = function random(min, max) {
  if (max === undefined) {
    max = min;
    min = 0;
  }
  return min + Math.floor(Math.random() * (max - min + 1));
};
var randPrefetcher = cryptoPrefetcher(4096, 4);
var UINT32_MAX = 0xffffffff;

// Generate random number in the range from 0 inclusive up to
// but not including 1 (same as Math.random),
// using crypto-secure number generator.
// Returns: <number>
var cryptoRandom = function cryptoRandom() {
  return randPrefetcher.next().readUInt32LE(0, true) / (UINT32_MAX + 1);
};
module.exports = {
  cryptoPrefetcher: cryptoPrefetcher,
  random: random,
  cryptoRandom: cryptoRandom
};