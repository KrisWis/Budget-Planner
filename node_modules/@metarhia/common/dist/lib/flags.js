'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _require = require('./uint64'),
  Uint64 = _require.Uint64;
var masks = [];
var masksNot = [];
for (var i = 0; i < 64; i++) {
  var mask = new Uint64(1).shiftLeft(i);
  masks.push(mask);
  masksNot.push(Uint64.not(mask));
}
var getErrorMsg = function getErrorMsg(key) {
  return "Flags instance does not have key ".concat(key);
};
var Flags = /*#__PURE__*/function () {
  function Flags() {
    _classCallCheck(this, Flags);
  }
  _createClass(Flags, null, [{
    key: "from",
    value: function from() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (args.length > 64) {
        throw new TypeError('Flags does not support more than 64 values');
      }
      var values = new Map(args.map(function (v, i) {
        return [v, i];
      }));
      var FlagsClass = /*#__PURE__*/function (_Symbol$toPrimitive) {
        function FlagsClass() {
          var _this = this;
          _classCallCheck(this, FlagsClass);
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          if (args[0] instanceof Uint64) {
            this.value = new Uint64(args[0]);
          } else {
            this.value = new Uint64(0);
            args.forEach(function (arg) {
              return _this.set(arg);
            });
          }
        }
        _createClass(FlagsClass, [{
          key: "get",
          value: function get(key) {
            var value = values.get(key);
            if (value === undefined) {
              throw new TypeError(getErrorMsg(key));
            }
            return (Uint64.shiftRight(this.value, value).toUint32() & 0x1) === 1;
          }
        }, {
          key: "set",
          value: function set(key) {
            var value = values.get(key);
            if (value === undefined) {
              throw new TypeError(getErrorMsg(key));
            }
            this.value.or(masks[value]);
          }
        }, {
          key: "unset",
          value: function unset(key) {
            var value = values.get(key);
            if (value === undefined) {
              throw new TypeError(getErrorMsg(key));
            }
            this.value.and(masksNot[value]);
          }
        }, {
          key: "toggle",
          value: function toggle(key) {
            var value = values.get(key);
            if (value === undefined) {
              throw new TypeError(getErrorMsg(key));
            }
            this.value.xor(masks[value]);
          }
        }, {
          key: "toString",
          value: function toString() {
            var str = this.value.toString(2);
            return '0'.repeat(values.size - str.length) + str;
          }
        }, {
          key: "toNumber",
          value: function toNumber() {
            return new Uint64(this.value);
          }
        }, {
          key: _Symbol$toPrimitive,
          value: function value() {
            return this.value.toUint32();
          }
        }], [{
          key: "from",
          value: function from() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }
            return _construct(FlagsClass, args);
          }
        }, {
          key: "has",
          value: function has(key) {
            return values.has(key);
          }
        }]);
        return FlagsClass;
      }(Symbol.toPrimitive);
      return FlagsClass;
    }
  }]);
  return Flags;
}();
module.exports = {
  Flags: Flags
};