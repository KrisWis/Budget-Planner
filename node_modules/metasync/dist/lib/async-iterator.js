/* eslint-disable no-use-before-define */
'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }

var _require = require('util'),
    promisify = _require.promisify;

var timeout = promisify(function (res) {
  return setTimeout(res, 0);
});

var toIterator = function toIterator(base) {
  if (base[Symbol.asyncIterator]) {
    return base[Symbol.asyncIterator]();
  } else if (base[Symbol.iterator]) {
    return base[Symbol.iterator]();
  } else {
    throw new TypeError('Base is not Iterable');
  }
};

var AsyncIterator = /*#__PURE__*/function () {
  function AsyncIterator(base) {
    _classCallCheck(this, AsyncIterator);

    this.base = toIterator(base);
  }

  _createClass(AsyncIterator, [{
    key: Symbol.asyncIterator,
    value: function value() {
      return this;
    }
  }, {
    key: "next",
    value: function () {
      var _next2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.base.next());

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function next() {
        return _next2.apply(this, arguments);
      }

      return next;
    }()
  }, {
    key: "count",
    value: function () {
      var _count = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var count;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                count = 0;

              case 1:
                _context2.next = 3;
                return this.next();

              case 3:
                if (_context2.sent.done) {
                  _context2.next = 7;
                  break;
                }

                count++;
                _context2.next = 1;
                break;

              case 7:
                return _context2.abrupt("return", count);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function count() {
        return _count.apply(this, arguments);
      }

      return count;
    }()
  }, {
    key: "each",
    value: function () {
      var _each = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(fn, thisArg) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.forEach(fn, thisArg));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function each(_x, _x2) {
        return _each.apply(this, arguments);
      }

      return each;
    }()
  }, {
    key: "forEach",
    value: function () {
      var _forEach = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(fn, thisArg) {
        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, value;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _context4.prev = 2;
                _iterator = _asyncIterator(this);

              case 4:
                _context4.next = 6;
                return _iterator.next();

              case 6:
                _step = _context4.sent;
                _iteratorNormalCompletion = _step.done;
                _context4.next = 10;
                return _step.value;

              case 10:
                _value = _context4.sent;

                if (_iteratorNormalCompletion) {
                  _context4.next = 18;
                  break;
                }

                value = _value;
                _context4.next = 15;
                return fn.call(thisArg, value);

              case 15:
                _iteratorNormalCompletion = true;
                _context4.next = 4;
                break;

              case 18:
                _context4.next = 24;
                break;

              case 20:
                _context4.prev = 20;
                _context4.t0 = _context4["catch"](2);
                _didIteratorError = true;
                _iteratorError = _context4.t0;

              case 24:
                _context4.prev = 24;
                _context4.prev = 25;

                if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                  _context4.next = 29;
                  break;
                }

                _context4.next = 29;
                return _iterator["return"]();

              case 29:
                _context4.prev = 29;

                if (!_didIteratorError) {
                  _context4.next = 32;
                  break;
                }

                throw _iteratorError;

              case 32:
                return _context4.finish(29);

              case 33:
                return _context4.finish(24);

              case 34:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[2, 20, 24, 34], [25,, 29, 33]]);
      }));

      function forEach(_x3, _x4) {
        return _forEach.apply(this, arguments);
      }

      return forEach;
    }()
  }, {
    key: "parallel",
    value: function () {
      var _parallel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(fn, thisArg) {
        var promises, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, value;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                promises = [];
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _context5.prev = 3;
                _iterator2 = _asyncIterator(this);

              case 5:
                _context5.next = 7;
                return _iterator2.next();

              case 7:
                _step2 = _context5.sent;
                _iteratorNormalCompletion2 = _step2.done;
                _context5.next = 11;
                return _step2.value;

              case 11:
                _value2 = _context5.sent;

                if (_iteratorNormalCompletion2) {
                  _context5.next = 18;
                  break;
                }

                value = _value2;
                promises.push(fn.call(thisArg, value));

              case 15:
                _iteratorNormalCompletion2 = true;
                _context5.next = 5;
                break;

              case 18:
                _context5.next = 24;
                break;

              case 20:
                _context5.prev = 20;
                _context5.t0 = _context5["catch"](3);
                _didIteratorError2 = true;
                _iteratorError2 = _context5.t0;

              case 24:
                _context5.prev = 24;
                _context5.prev = 25;

                if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
                  _context5.next = 29;
                  break;
                }

                _context5.next = 29;
                return _iterator2["return"]();

              case 29:
                _context5.prev = 29;

                if (!_didIteratorError2) {
                  _context5.next = 32;
                  break;
                }

                throw _iteratorError2;

              case 32:
                return _context5.finish(29);

              case 33:
                return _context5.finish(24);

              case 34:
                return _context5.abrupt("return", Promise.all(promises));

              case 35:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[3, 20, 24, 34], [25,, 29, 33]]);
      }));

      function parallel(_x5, _x6) {
        return _parallel.apply(this, arguments);
      }

      return parallel;
    }()
  }, {
    key: "every",
    value: function () {
      var _every = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(predicate, thisArg) {
        var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, value;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _context6.prev = 2;
                _iterator3 = _asyncIterator(this);

              case 4:
                _context6.next = 6;
                return _iterator3.next();

              case 6:
                _step3 = _context6.sent;
                _iteratorNormalCompletion3 = _step3.done;
                _context6.next = 10;
                return _step3.value;

              case 10:
                _value3 = _context6.sent;

                if (_iteratorNormalCompletion3) {
                  _context6.next = 20;
                  break;
                }

                value = _value3;
                _context6.next = 15;
                return predicate.call(thisArg, value);

              case 15:
                if (_context6.sent) {
                  _context6.next = 17;
                  break;
                }

                return _context6.abrupt("return", false);

              case 17:
                _iteratorNormalCompletion3 = true;
                _context6.next = 4;
                break;

              case 20:
                _context6.next = 26;
                break;

              case 22:
                _context6.prev = 22;
                _context6.t0 = _context6["catch"](2);
                _didIteratorError3 = true;
                _iteratorError3 = _context6.t0;

              case 26:
                _context6.prev = 26;
                _context6.prev = 27;

                if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
                  _context6.next = 31;
                  break;
                }

                _context6.next = 31;
                return _iterator3["return"]();

              case 31:
                _context6.prev = 31;

                if (!_didIteratorError3) {
                  _context6.next = 34;
                  break;
                }

                throw _iteratorError3;

              case 34:
                return _context6.finish(31);

              case 35:
                return _context6.finish(26);

              case 36:
                return _context6.abrupt("return", true);

              case 37:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[2, 22, 26, 36], [27,, 31, 35]]);
      }));

      function every(_x7, _x8) {
        return _every.apply(this, arguments);
      }

      return every;
    }()
  }, {
    key: "find",
    value: function () {
      var _find = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(predicate, thisArg) {
        var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, value;

        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _iteratorNormalCompletion4 = true;
                _didIteratorError4 = false;
                _context7.prev = 2;
                _iterator4 = _asyncIterator(this);

              case 4:
                _context7.next = 6;
                return _iterator4.next();

              case 6:
                _step4 = _context7.sent;
                _iteratorNormalCompletion4 = _step4.done;
                _context7.next = 10;
                return _step4.value;

              case 10:
                _value4 = _context7.sent;

                if (_iteratorNormalCompletion4) {
                  _context7.next = 20;
                  break;
                }

                value = _value4;
                _context7.next = 15;
                return predicate.call(thisArg, value);

              case 15:
                if (!_context7.sent) {
                  _context7.next = 17;
                  break;
                }

                return _context7.abrupt("return", value);

              case 17:
                _iteratorNormalCompletion4 = true;
                _context7.next = 4;
                break;

              case 20:
                _context7.next = 26;
                break;

              case 22:
                _context7.prev = 22;
                _context7.t0 = _context7["catch"](2);
                _didIteratorError4 = true;
                _iteratorError4 = _context7.t0;

              case 26:
                _context7.prev = 26;
                _context7.prev = 27;

                if (!(!_iteratorNormalCompletion4 && _iterator4["return"] != null)) {
                  _context7.next = 31;
                  break;
                }

                _context7.next = 31;
                return _iterator4["return"]();

              case 31:
                _context7.prev = 31;

                if (!_didIteratorError4) {
                  _context7.next = 34;
                  break;
                }

                throw _iteratorError4;

              case 34:
                return _context7.finish(31);

              case 35:
                return _context7.finish(26);

              case 36:
                return _context7.abrupt("return", undefined);

              case 37:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[2, 22, 26, 36], [27,, 31, 35]]);
      }));

      function find(_x9, _x10) {
        return _find.apply(this, arguments);
      }

      return find;
    }()
  }, {
    key: "includes",
    value: function () {
      var _includes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(element) {
        var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _value5, value;

        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _iteratorNormalCompletion5 = true;
                _didIteratorError5 = false;
                _context8.prev = 2;
                _iterator5 = _asyncIterator(this);

              case 4:
                _context8.next = 6;
                return _iterator5.next();

              case 6:
                _step5 = _context8.sent;
                _iteratorNormalCompletion5 = _step5.done;
                _context8.next = 10;
                return _step5.value;

              case 10:
                _value5 = _context8.sent;

                if (_iteratorNormalCompletion5) {
                  _context8.next = 18;
                  break;
                }

                value = _value5;

                if (!(value === element || Number.isNaN(value) && Number.isNaN(element))) {
                  _context8.next = 15;
                  break;
                }

                return _context8.abrupt("return", true);

              case 15:
                _iteratorNormalCompletion5 = true;
                _context8.next = 4;
                break;

              case 18:
                _context8.next = 24;
                break;

              case 20:
                _context8.prev = 20;
                _context8.t0 = _context8["catch"](2);
                _didIteratorError5 = true;
                _iteratorError5 = _context8.t0;

              case 24:
                _context8.prev = 24;
                _context8.prev = 25;

                if (!(!_iteratorNormalCompletion5 && _iterator5["return"] != null)) {
                  _context8.next = 29;
                  break;
                }

                _context8.next = 29;
                return _iterator5["return"]();

              case 29:
                _context8.prev = 29;

                if (!_didIteratorError5) {
                  _context8.next = 32;
                  break;
                }

                throw _iteratorError5;

              case 32:
                return _context8.finish(29);

              case 33:
                return _context8.finish(24);

              case 34:
                return _context8.abrupt("return", false);

              case 35:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[2, 20, 24, 34], [25,, 29, 33]]);
      }));

      function includes(_x11) {
        return _includes.apply(this, arguments);
      }

      return includes;
    }()
  }, {
    key: "reduce",
    value: function () {
      var _reduce = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(reducer, initialValue) {
        var result, next, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _value6, value;

        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                result = initialValue;

                if (!(result === undefined)) {
                  _context9.next = 8;
                  break;
                }

                _context9.next = 4;
                return this.next();

              case 4:
                next = _context9.sent;

                if (!next.done) {
                  _context9.next = 7;
                  break;
                }

                throw new TypeError('Reduce of consumed async iterator with no initial value');

              case 7:
                result = next.value;

              case 8:
                _iteratorNormalCompletion6 = true;
                _didIteratorError6 = false;
                _context9.prev = 10;
                _iterator6 = _asyncIterator(this);

              case 12:
                _context9.next = 14;
                return _iterator6.next();

              case 14:
                _step6 = _context9.sent;
                _iteratorNormalCompletion6 = _step6.done;
                _context9.next = 18;
                return _step6.value;

              case 18:
                _value6 = _context9.sent;

                if (_iteratorNormalCompletion6) {
                  _context9.next = 27;
                  break;
                }

                value = _value6;
                _context9.next = 23;
                return reducer(result, value);

              case 23:
                result = _context9.sent;

              case 24:
                _iteratorNormalCompletion6 = true;
                _context9.next = 12;
                break;

              case 27:
                _context9.next = 33;
                break;

              case 29:
                _context9.prev = 29;
                _context9.t0 = _context9["catch"](10);
                _didIteratorError6 = true;
                _iteratorError6 = _context9.t0;

              case 33:
                _context9.prev = 33;
                _context9.prev = 34;

                if (!(!_iteratorNormalCompletion6 && _iterator6["return"] != null)) {
                  _context9.next = 38;
                  break;
                }

                _context9.next = 38;
                return _iterator6["return"]();

              case 38:
                _context9.prev = 38;

                if (!_didIteratorError6) {
                  _context9.next = 41;
                  break;
                }

                throw _iteratorError6;

              case 41:
                return _context9.finish(38);

              case 42:
                return _context9.finish(33);

              case 43:
                return _context9.abrupt("return", result);

              case 44:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[10, 29, 33, 43], [34,, 38, 42]]);
      }));

      function reduce(_x12, _x13) {
        return _reduce.apply(this, arguments);
      }

      return reduce;
    }()
  }, {
    key: "some",
    value: function () {
      var _some = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(predicate, thisArg) {
        var _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _value7, value;

        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _iteratorNormalCompletion7 = true;
                _didIteratorError7 = false;
                _context10.prev = 2;
                _iterator7 = _asyncIterator(this);

              case 4:
                _context10.next = 6;
                return _iterator7.next();

              case 6:
                _step7 = _context10.sent;
                _iteratorNormalCompletion7 = _step7.done;
                _context10.next = 10;
                return _step7.value;

              case 10:
                _value7 = _context10.sent;

                if (_iteratorNormalCompletion7) {
                  _context10.next = 20;
                  break;
                }

                value = _value7;
                _context10.next = 15;
                return predicate.call(thisArg, value);

              case 15:
                if (!_context10.sent) {
                  _context10.next = 17;
                  break;
                }

                return _context10.abrupt("return", true);

              case 17:
                _iteratorNormalCompletion7 = true;
                _context10.next = 4;
                break;

              case 20:
                _context10.next = 26;
                break;

              case 22:
                _context10.prev = 22;
                _context10.t0 = _context10["catch"](2);
                _didIteratorError7 = true;
                _iteratorError7 = _context10.t0;

              case 26:
                _context10.prev = 26;
                _context10.prev = 27;

                if (!(!_iteratorNormalCompletion7 && _iterator7["return"] != null)) {
                  _context10.next = 31;
                  break;
                }

                _context10.next = 31;
                return _iterator7["return"]();

              case 31:
                _context10.prev = 31;

                if (!_didIteratorError7) {
                  _context10.next = 34;
                  break;
                }

                throw _iteratorError7;

              case 34:
                return _context10.finish(31);

              case 35:
                return _context10.finish(26);

              case 36:
                return _context10.abrupt("return", false);

              case 37:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[2, 22, 26, 36], [27,, 31, 35]]);
      }));

      function some(_x14, _x15) {
        return _some.apply(this, arguments);
      }

      return some;
    }()
  }, {
    key: "someCount",
    value: function () {
      var _someCount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(predicate, count, thisArg) {
        var n, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _value8, value;

        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                n = 0;
                _iteratorNormalCompletion8 = true;
                _didIteratorError8 = false;
                _context11.prev = 3;
                _iterator8 = _asyncIterator(this);

              case 5:
                _context11.next = 7;
                return _iterator8.next();

              case 7:
                _step8 = _context11.sent;
                _iteratorNormalCompletion8 = _step8.done;
                _context11.next = 11;
                return _step8.value;

              case 11:
                _value8 = _context11.sent;

                if (_iteratorNormalCompletion8) {
                  _context11.next = 22;
                  break;
                }

                value = _value8;
                _context11.next = 16;
                return predicate.call(thisArg, value);

              case 16:
                if (!_context11.sent) {
                  _context11.next = 19;
                  break;
                }

                if (!(++n === count)) {
                  _context11.next = 19;
                  break;
                }

                return _context11.abrupt("return", true);

              case 19:
                _iteratorNormalCompletion8 = true;
                _context11.next = 5;
                break;

              case 22:
                _context11.next = 28;
                break;

              case 24:
                _context11.prev = 24;
                _context11.t0 = _context11["catch"](3);
                _didIteratorError8 = true;
                _iteratorError8 = _context11.t0;

              case 28:
                _context11.prev = 28;
                _context11.prev = 29;

                if (!(!_iteratorNormalCompletion8 && _iterator8["return"] != null)) {
                  _context11.next = 33;
                  break;
                }

                _context11.next = 33;
                return _iterator8["return"]();

              case 33:
                _context11.prev = 33;

                if (!_didIteratorError8) {
                  _context11.next = 36;
                  break;
                }

                throw _iteratorError8;

              case 36:
                return _context11.finish(33);

              case 37:
                return _context11.finish(28);

              case 38:
                return _context11.abrupt("return", false);

              case 39:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this, [[3, 24, 28, 38], [29,, 33, 37]]);
      }));

      function someCount(_x16, _x17, _x18) {
        return _someCount.apply(this, arguments);
      }

      return someCount;
    }()
  }, {
    key: "collectTo",
    value: function () {
      var _collectTo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(CollectionClass) {
        var arr;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.toArray();

              case 2:
                arr = _context12.sent;
                return _context12.abrupt("return", new CollectionClass(arr));

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function collectTo(_x19) {
        return _collectTo.apply(this, arguments);
      }

      return collectTo;
    }()
  }, {
    key: "collectWith",
    value: function () {
      var _collectWith = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(obj, collector) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.forEach(function (element) {
                  return collector(obj, element);
                });

              case 2:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function collectWith(_x20, _x21) {
        return _collectWith.apply(this, arguments);
      }

      return collectWith;
    }()
  }, {
    key: "join",
    value: function () {
      var _join = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        var sep,
            prefix,
            suffix,
            result,
            _yield$this$next,
            done,
            value,
            _iteratorNormalCompletion9,
            _didIteratorError9,
            _iteratorError9,
            _iterator9,
            _step9,
            _value9,
            _value12,
            _args14 = arguments;

        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                sep = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : ',';
                prefix = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : '';
                suffix = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : '';
                result = prefix;
                _context14.next = 6;
                return this.next();

              case 6:
                _yield$this$next = _context14.sent;
                done = _yield$this$next.done;
                value = _yield$this$next.value;

                if (done) {
                  _context14.next = 44;
                  break;
                }

                result += value;
                _iteratorNormalCompletion9 = true;
                _didIteratorError9 = false;
                _context14.prev = 13;
                _iterator9 = _asyncIterator(this);

              case 15:
                _context14.next = 17;
                return _iterator9.next();

              case 17:
                _step9 = _context14.sent;
                _iteratorNormalCompletion9 = _step9.done;
                _context14.next = 21;
                return _step9.value;

              case 21:
                _value9 = _context14.sent;

                if (_iteratorNormalCompletion9) {
                  _context14.next = 28;
                  break;
                }

                _value12 = _value9;
                result += sep + _value12;

              case 25:
                _iteratorNormalCompletion9 = true;
                _context14.next = 15;
                break;

              case 28:
                _context14.next = 34;
                break;

              case 30:
                _context14.prev = 30;
                _context14.t0 = _context14["catch"](13);
                _didIteratorError9 = true;
                _iteratorError9 = _context14.t0;

              case 34:
                _context14.prev = 34;
                _context14.prev = 35;

                if (!(!_iteratorNormalCompletion9 && _iterator9["return"] != null)) {
                  _context14.next = 39;
                  break;
                }

                _context14.next = 39;
                return _iterator9["return"]();

              case 39:
                _context14.prev = 39;

                if (!_didIteratorError9) {
                  _context14.next = 42;
                  break;
                }

                throw _iteratorError9;

              case 42:
                return _context14.finish(39);

              case 43:
                return _context14.finish(34);

              case 44:
                return _context14.abrupt("return", result + suffix);

              case 45:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this, [[13, 30, 34, 44], [35,, 39, 43]]);
      }));

      function join() {
        return _join.apply(this, arguments);
      }

      return join;
    }()
  }, {
    key: "toArray",
    value: function () {
      var _toArray = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
        var newArray, _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, _value10, value;

        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                newArray = [];
                _iteratorNormalCompletion10 = true;
                _didIteratorError10 = false;
                _context15.prev = 3;
                _iterator10 = _asyncIterator(this);

              case 5:
                _context15.next = 7;
                return _iterator10.next();

              case 7:
                _step10 = _context15.sent;
                _iteratorNormalCompletion10 = _step10.done;
                _context15.next = 11;
                return _step10.value;

              case 11:
                _value10 = _context15.sent;

                if (_iteratorNormalCompletion10) {
                  _context15.next = 18;
                  break;
                }

                value = _value10;
                newArray.push(value);

              case 15:
                _iteratorNormalCompletion10 = true;
                _context15.next = 5;
                break;

              case 18:
                _context15.next = 24;
                break;

              case 20:
                _context15.prev = 20;
                _context15.t0 = _context15["catch"](3);
                _didIteratorError10 = true;
                _iteratorError10 = _context15.t0;

              case 24:
                _context15.prev = 24;
                _context15.prev = 25;

                if (!(!_iteratorNormalCompletion10 && _iterator10["return"] != null)) {
                  _context15.next = 29;
                  break;
                }

                _context15.next = 29;
                return _iterator10["return"]();

              case 29:
                _context15.prev = 29;

                if (!_didIteratorError10) {
                  _context15.next = 32;
                  break;
                }

                throw _iteratorError10;

              case 32:
                return _context15.finish(29);

              case 33:
                return _context15.finish(24);

              case 34:
                return _context15.abrupt("return", newArray);

              case 35:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this, [[3, 20, 24, 34], [25,, 29, 33]]);
      }));

      function toArray() {
        return _toArray.apply(this, arguments);
      }

      return toArray;
    }()
  }, {
    key: "map",
    value: function map(mapper, thisArg) {
      return new MapIterator(this, mapper, thisArg);
    }
  }, {
    key: "filter",
    value: function filter(predicate, thisArg) {
      return new FilterIterator(this, predicate, thisArg);
    }
  }, {
    key: "flat",
    value: function flat() {
      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new FlatIterator(this, depth);
    }
  }, {
    key: "flatMap",
    value: function flatMap(mapper, thisArg) {
      return new FlatMapIterator(this, mapper, thisArg);
    }
  }, {
    key: "zip",
    value: function zip() {
      for (var _len = arguments.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {
        iterators[_key] = arguments[_key];
      }

      return new ZipIterator(this, iterators);
    }
  }, {
    key: "chain",
    value: function chain() {
      for (var _len2 = arguments.length, iterators = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        iterators[_key2] = arguments[_key2];
      }

      return new ChainIterator(this, iterators);
    }
  }, {
    key: "take",
    value: function take(amount) {
      return new TakeIterator(this, amount);
    }
  }, {
    key: "takeWhile",
    value: function takeWhile(predicate, thisArg) {
      return new TakeWhileIterator(this, predicate, thisArg);
    }
  }, {
    key: "skip",
    value: function skip(amount) {
      for (var i = 0; i < amount; i++) {
        this.next();
      }

      return this;
    }
  }, {
    key: "throttle",
    value: function throttle(percent, min) {
      return new ThrottleIterator(this, percent, min);
    }
  }, {
    key: "enumerate",
    value: function enumerate() {
      return new EnumerateIterator(this);
    }
  }]);

  return AsyncIterator;
}();

var MapIterator = /*#__PURE__*/function (_AsyncIterator) {
  _inherits(MapIterator, _AsyncIterator);

  var _super = _createSuper(MapIterator);

  function MapIterator(base, mapper, thisArg) {
    var _this;

    _classCallCheck(this, MapIterator);

    _this = _super.call(this, base);
    _this.mapper = mapper;
    _this.thisArg = thisArg;
    return _this;
  }

  _createClass(MapIterator, [{
    key: "next",
    value: function () {
      var _next3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
        var _yield$this$base$next, done, value;

        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.base.next();

              case 2:
                _yield$this$base$next = _context16.sent;
                done = _yield$this$base$next.done;
                value = _yield$this$base$next.value;
                _context16.t0 = done;

                if (!done) {
                  _context16.next = 10;
                  break;
                }

                _context16.t1 = undefined;
                _context16.next = 13;
                break;

              case 10:
                _context16.next = 12;
                return this.mapper.call(this.thisArg, value);

              case 12:
                _context16.t1 = _context16.sent;

              case 13:
                _context16.t2 = _context16.t1;
                return _context16.abrupt("return", {
                  done: _context16.t0,
                  value: _context16.t2
                });

              case 15:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function next() {
        return _next3.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return MapIterator;
}(AsyncIterator);

var FilterIterator = /*#__PURE__*/function (_AsyncIterator2) {
  _inherits(FilterIterator, _AsyncIterator2);

  var _super2 = _createSuper(FilterIterator);

  function FilterIterator(base, predicate, thisArg) {
    var _this2;

    _classCallCheck(this, FilterIterator);

    _this2 = _super2.call(this, base);
    _this2.predicate = predicate;
    _this2.thisArg = thisArg;
    return _this2;
  }

  _createClass(FilterIterator, [{
    key: "next",
    value: function () {
      var _next4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
        var _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, _value11, value;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _iteratorNormalCompletion11 = true;
                _didIteratorError11 = false;
                _context17.prev = 2;
                _iterator11 = _asyncIterator(this.base);

              case 4:
                _context17.next = 6;
                return _iterator11.next();

              case 6:
                _step11 = _context17.sent;
                _iteratorNormalCompletion11 = _step11.done;
                _context17.next = 10;
                return _step11.value;

              case 10:
                _value11 = _context17.sent;

                if (_iteratorNormalCompletion11) {
                  _context17.next = 20;
                  break;
                }

                value = _value11;
                _context17.next = 15;
                return this.predicate.call(this.thisArg, value);

              case 15:
                if (!_context17.sent) {
                  _context17.next = 17;
                  break;
                }

                return _context17.abrupt("return", {
                  done: false,
                  value: value
                });

              case 17:
                _iteratorNormalCompletion11 = true;
                _context17.next = 4;
                break;

              case 20:
                _context17.next = 26;
                break;

              case 22:
                _context17.prev = 22;
                _context17.t0 = _context17["catch"](2);
                _didIteratorError11 = true;
                _iteratorError11 = _context17.t0;

              case 26:
                _context17.prev = 26;
                _context17.prev = 27;

                if (!(!_iteratorNormalCompletion11 && _iterator11["return"] != null)) {
                  _context17.next = 31;
                  break;
                }

                _context17.next = 31;
                return _iterator11["return"]();

              case 31:
                _context17.prev = 31;

                if (!_didIteratorError11) {
                  _context17.next = 34;
                  break;
                }

                throw _iteratorError11;

              case 34:
                return _context17.finish(31);

              case 35:
                return _context17.finish(26);

              case 36:
                return _context17.abrupt("return", {
                  done: true,
                  value: undefined
                });

              case 37:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this, [[2, 22, 26, 36], [27,, 31, 35]]);
      }));

      function next() {
        return _next4.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return FilterIterator;
}(AsyncIterator);

var FlatIterator = /*#__PURE__*/function (_AsyncIterator3) {
  _inherits(FlatIterator, _AsyncIterator3);

  var _super3 = _createSuper(FlatIterator);

  function FlatIterator(base, depth) {
    var _this3;

    _classCallCheck(this, FlatIterator);

    _this3 = _super3.call(this, base);
    _this3.currentDepth = 0;
    _this3.stack = new Array(depth + 1);
    _this3.stack[0] = base;
    return _this3;
  }

  _createClass(FlatIterator, [{
    key: "next",
    value: function () {
      var _next5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
        var top, _next6;

        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                if (!(this.currentDepth >= 0)) {
                  _context18.next = 14;
                  break;
                }

                top = this.stack[this.currentDepth];
                _context18.next = 4;
                return top.next();

              case 4:
                _next6 = _context18.sent;

                if (!_next6.done) {
                  _context18.next = 9;
                  break;
                }

                this.stack[this.currentDepth] = null;
                this.currentDepth--;
                return _context18.abrupt("continue", 0);

              case 9:
                if (!(this.currentDepth === this.stack.length - 1 || !_next6.value[Symbol.iterator] && !_next6.value[Symbol.asyncIterator])) {
                  _context18.next = 11;
                  break;
                }

                return _context18.abrupt("return", _next6);

              case 11:
                this.stack[++this.currentDepth] = _next6.value[Symbol.asyncIterator] ? _next6.value[Symbol.asyncIterator]() : _next6.value[Symbol.iterator]();
                _context18.next = 0;
                break;

              case 14:
                return _context18.abrupt("return", {
                  done: true,
                  value: undefined
                });

              case 15:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function next() {
        return _next5.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return FlatIterator;
}(AsyncIterator);

var FlatMapIterator = /*#__PURE__*/function (_AsyncIterator4) {
  _inherits(FlatMapIterator, _AsyncIterator4);

  var _super4 = _createSuper(FlatMapIterator);

  function FlatMapIterator(base, mapper, thisArg) {
    var _this4;

    _classCallCheck(this, FlatMapIterator);

    _this4 = _super4.call(this, base);
    _this4.mapper = mapper;
    _this4.thisArg = thisArg;
    _this4.currentIterator = null;
    return _this4;
  }

  _createClass(FlatMapIterator, [{
    key: "next",
    value: function () {
      var _next7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
        var _next8, value, next;

        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (this.currentIterator) {
                  _context19.next = 10;
                  break;
                }

                _context19.next = 3;
                return this.base.next();

              case 3:
                _next8 = _context19.sent;

                if (!_next8.done) {
                  _context19.next = 6;
                  break;
                }

                return _context19.abrupt("return", _next8);

              case 6:
                value = this.mapper.call(this.thisArg, _next8.value);

                if (!(!value[Symbol.iterator] && !value[Symbol.asyncIterator])) {
                  _context19.next = 9;
                  break;
                }

                return _context19.abrupt("return", {
                  done: false,
                  value: value
                });

              case 9:
                this.currentIterator = toIterator(value);

              case 10:
                _context19.next = 12;
                return this.currentIterator.next();

              case 12:
                next = _context19.sent;

                if (!next.done) {
                  _context19.next = 16;
                  break;
                }

                this.currentIterator = null;
                return _context19.abrupt("return", this.next());

              case 16:
                return _context19.abrupt("return", next);

              case 17:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function next() {
        return _next7.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return FlatMapIterator;
}(AsyncIterator);

var TakeIterator = /*#__PURE__*/function (_AsyncIterator5) {
  _inherits(TakeIterator, _AsyncIterator5);

  var _super5 = _createSuper(TakeIterator);

  function TakeIterator(base, amount) {
    var _this5;

    _classCallCheck(this, TakeIterator);

    _this5 = _super5.call(this, base);
    _this5.amount = amount;
    _this5.iterated = 0;
    return _this5;
  }

  _createClass(TakeIterator, [{
    key: "next",
    value: function () {
      var _next9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
        return regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                this.iterated++;

                if (!(this.iterated <= this.amount)) {
                  _context20.next = 3;
                  break;
                }

                return _context20.abrupt("return", this.base.next());

              case 3:
                return _context20.abrupt("return", {
                  done: true,
                  value: undefined
                });

              case 4:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function next() {
        return _next9.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return TakeIterator;
}(AsyncIterator);

var TakeWhileIterator = /*#__PURE__*/function (_AsyncIterator6) {
  _inherits(TakeWhileIterator, _AsyncIterator6);

  var _super6 = _createSuper(TakeWhileIterator);

  function TakeWhileIterator(base, predicate, thisArg) {
    var _this6;

    _classCallCheck(this, TakeWhileIterator);

    _this6 = _super6.call(this, base);
    _this6.predicate = predicate;
    _this6.thisArg = thisArg;
    _this6.done = false;
    return _this6;
  }

  _createClass(TakeWhileIterator, [{
    key: "next",
    value: function () {
      var _next10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
        var next;
        return regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                if (!this.done) {
                  _context21.next = 2;
                  break;
                }

                return _context21.abrupt("return", {
                  done: true,
                  value: undefined
                });

              case 2:
                _context21.next = 4;
                return this.base.next();

              case 4:
                next = _context21.sent;
                _context21.t0 = !next.done;

                if (!_context21.t0) {
                  _context21.next = 10;
                  break;
                }

                _context21.next = 9;
                return this.predicate.call(this.thisArg, next.value);

              case 9:
                _context21.t0 = _context21.sent;

              case 10:
                if (!_context21.t0) {
                  _context21.next = 12;
                  break;
                }

                return _context21.abrupt("return", next);

              case 12:
                this.done = true;
                return _context21.abrupt("return", {
                  done: true,
                  value: undefined
                });

              case 14:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function next() {
        return _next10.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return TakeWhileIterator;
}(AsyncIterator);

var ZipIterator = /*#__PURE__*/function (_AsyncIterator7) {
  _inherits(ZipIterator, _AsyncIterator7);

  var _super7 = _createSuper(ZipIterator);

  function ZipIterator(base, iterators) {
    var _this7;

    _classCallCheck(this, ZipIterator);

    _this7 = _super7.call(this, base);
    _this7.iterators = iterators.map(toIterator);
    return _this7;
  }

  _createClass(ZipIterator, [{
    key: "next",
    value: function () {
      var _next11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
        var result, next, _iterator12, _step12, iterator, _next12;

        return regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                result = [];
                _context22.next = 3;
                return this.base.next();

              case 3:
                next = _context22.sent;

                if (!next.done) {
                  _context22.next = 6;
                  break;
                }

                return _context22.abrupt("return", next);

              case 6:
                result.push(next.value);
                _iterator12 = _createForOfIteratorHelper(this.iterators);
                _context22.prev = 8;

                _iterator12.s();

              case 10:
                if ((_step12 = _iterator12.n()).done) {
                  _context22.next = 20;
                  break;
                }

                iterator = _step12.value;
                _context22.next = 14;
                return iterator.next();

              case 14:
                _next12 = _context22.sent;

                if (!_next12.done) {
                  _context22.next = 17;
                  break;
                }

                return _context22.abrupt("return", _next12);

              case 17:
                result.push(_next12.value);

              case 18:
                _context22.next = 10;
                break;

              case 20:
                _context22.next = 25;
                break;

              case 22:
                _context22.prev = 22;
                _context22.t0 = _context22["catch"](8);

                _iterator12.e(_context22.t0);

              case 25:
                _context22.prev = 25;

                _iterator12.f();

                return _context22.finish(25);

              case 28:
                return _context22.abrupt("return", {
                  done: false,
                  value: result
                });

              case 29:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this, [[8, 22, 25, 28]]);
      }));

      function next() {
        return _next11.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return ZipIterator;
}(AsyncIterator);

var ChainIterator = /*#__PURE__*/function (_AsyncIterator8) {
  _inherits(ChainIterator, _AsyncIterator8);

  var _super8 = _createSuper(ChainIterator);

  function ChainIterator(base, iterators) {
    var _this8;

    _classCallCheck(this, ChainIterator);

    _this8 = _super8.call(this, base);
    _this8.currentIterator = base;
    _this8.iterators = iterators.map(toIterator)[Symbol.iterator]();
    return _this8;
  }

  _createClass(ChainIterator, [{
    key: "next",
    value: function () {
      var _next13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
        var next, iterator;
        return regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.currentIterator.next();

              case 2:
                next = _context23.sent;

                if (next.done) {
                  _context23.next = 5;
                  break;
                }

                return _context23.abrupt("return", next);

              case 5:
                iterator = this.iterators.next();

                if (!iterator.done) {
                  _context23.next = 8;
                  break;
                }

                return _context23.abrupt("return", iterator);

              case 8:
                this.currentIterator = iterator.value;
                return _context23.abrupt("return", this.next());

              case 10:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function next() {
        return _next13.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return ChainIterator;
}(AsyncIterator);

var EnumerateIterator = /*#__PURE__*/function (_AsyncIterator9) {
  _inherits(EnumerateIterator, _AsyncIterator9);

  var _super9 = _createSuper(EnumerateIterator);

  function EnumerateIterator(base) {
    var _this9;

    _classCallCheck(this, EnumerateIterator);

    _this9 = _super9.call(this, base);
    _this9.index = 0;
    return _this9;
  }

  _createClass(EnumerateIterator, [{
    key: "next",
    value: function () {
      var _next14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
        var next;
        return regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.base.next();

              case 2:
                next = _context24.sent;

                if (!next.done) {
                  _context24.next = 5;
                  break;
                }

                return _context24.abrupt("return", next);

              case 5:
                return _context24.abrupt("return", {
                  done: false,
                  value: [this.index++, next.value]
                });

              case 6:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function next() {
        return _next14.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return EnumerateIterator;
}(AsyncIterator);

var ThrottleIterator = /*#__PURE__*/function (_AsyncIterator10) {
  _inherits(ThrottleIterator, _AsyncIterator10);

  var _super10 = _createSuper(ThrottleIterator);

  function ThrottleIterator(base) {
    var _this10;

    var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.7;
    var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;

    _classCallCheck(this, ThrottleIterator);

    _this10 = _super10.call(this, base);
    _this10.min = min;
    _this10.ratio = percent / (1 - percent);
    _this10.sum = 0;
    _this10.count = 0;
    _this10.begin = Date.now();
    _this10.iterMax = _this10.min;
    return _this10;
  }

  _createClass(ThrottleIterator, [{
    key: "next",
    value: function () {
      var _next15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
        var itemTime, loopTime, number;
        return regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                if (!(this.iterMax > this.count)) {
                  _context25.next = 3;
                  break;
                }

                this.count++;
                return _context25.abrupt("return", this.base.next());

              case 3:
                this.sum += Date.now() - this.begin;
                itemTime = this.sum / this.count;
                this.begin = Date.now();
                _context25.next = 8;
                return timeout();

              case 8:
                loopTime = Date.now() - this.begin;
                number = Math.max(this.ratio * loopTime / itemTime, this.min);
                this.iterMax = Math.round(number) + this.count;
                this.count++;
                this.begin = Date.now();
                return _context25.abrupt("return", this.base.next());

              case 14:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function next() {
        return _next15.apply(this, arguments);
      }

      return next;
    }()
  }]);

  return ThrottleIterator;
}(AsyncIterator); // Create an AsyncIterator instance
//   base - <Iterable> | <AsyncIterable>, an iterable
//       that is wrapped in <AsyncIterator>
//
// Returns: <AsyncIterator>


var asyncIter = function asyncIter(base) {
  return new AsyncIterator(base);
};

module.exports = {
  asyncIter: asyncIter,
  AsyncIterator: AsyncIterator
};