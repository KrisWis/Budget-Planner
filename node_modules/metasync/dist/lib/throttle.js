'use strict'; // Get throttling function, executed once per interval
// Signature: timeout, fn, ...args
//   timeout - <number>, msec interval
//   fn - <Function>, to be throttled
//   args - <Array>, arguments for fn, optional
//
// Returns: <Function>

var throttle = function throttle(timeout, fn) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var timer;
  var wait = false;
  var execute = args ? function () {
    for (var _len2 = arguments.length, pars = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      pars[_key2] = arguments[_key2];
    }

    return pars ? fn.apply(void 0, args.concat(pars)) : fn.apply(void 0, args);
  } : function () {
    for (var _len3 = arguments.length, pars = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      pars[_key3] = arguments[_key3];
    }

    return pars ? fn.apply(void 0, pars) : fn();
  };

  var delayed = function delayed() {
    timer = undefined;
    if (wait) execute.apply(void 0, arguments);
  };

  var throttled = function throttled() {
    if (!timer) {
      for (var _len4 = arguments.length, pars = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        pars[_key4] = arguments[_key4];
      }

      timer = setTimeout.apply(void 0, [delayed, timeout].concat(pars));
      wait = false;
      execute.apply(void 0, pars);
    }

    wait = true;
  };

  return throttled;
}; // Debounce function, delayed execution
// Signature: timeout, fn, ...args
//   timeout - <number>, msec
//   fn - <Function>, to be debounced
//   args - <Array>, arguments for fn, optional


var debounce = function debounce(timeout, fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
    args[_key5 - 2] = arguments[_key5];
  }

  var timer;

  var debounced = function debounced() {
    return args ? fn.apply(void 0, args) : fn();
  };

  var wrapped = function wrapped() {
    if (timer) clearTimeout(timer);
    timer = setTimeout(debounced, timeout);
  };

  return wrapped;
};

var FN_TIMEOUT = 'Metasync: asynchronous function timed out'; // Set timeout for asynchronous function execution
//   timeout - <number>, time interval
//   fn - <Function>, to be executed
//   callback - <Function>, callback(...args), on done
//     args - <Array>

var timeout = function timeout(_timeout, fn, callback) {
  var finished = false;
  var timer = setTimeout(function () {
    finished = true;
    callback(new Error(FN_TIMEOUT));
  }, _timeout);
  fn(function () {
    if (!finished) {
      clearTimeout(timer);
      finished = true;
      callback.apply(void 0, arguments);
    }
  });
};

module.exports = {
  throttle: throttle,
  debounce: debounce,
  timeout: timeout
};