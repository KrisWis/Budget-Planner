'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var common = require('@metarhia/common');

var _require = require('./array'),
    each = _require.each; // Executes all asynchronous functions and pass first result to callback
//   fns - <Function[]>, callback-last / err-first
//   callback - <Function>, on done, err-first


var firstOf = function firstOf(fns, callback) {
  var done = common.once(callback);
  each(fns, function (f, iterCb) {
    return f(function () {
      done.apply(void 0, arguments);
      iterCb.apply(void 0, arguments);
    });
  });
}; // Parallel execution
// Signature: fns[, context], callback
//   fns - <Function[]>, callback-last / err-first
//   context - <Object>, incoming data, optional
//   callback - <Function>, on done, err-first
//
// Example:
// metasync.parallel([f1, f2, f3], (err, data) => {});


var parallel = function parallel(fns, context, callback) {
  if (!callback) {
    callback = context;
    context = {};
  }

  var done = common.once(callback);
  var isArray = Array.isArray(context);
  var len = fns.length;

  if (len === 0) {
    done(null, context);
    return;
  }

  var counter = 0;

  var finishFn = function finishFn(fn, err, result) {
    if (err) {
      done(err);
      return;
    }

    if (result !== context && result !== undefined) {
      if (isArray) context.push(result);else if (_typeof(result) === 'object') Object.assign(context, result);
    }

    if (++counter === len) done(null, context);
  }; // fn may be array of function


  var _iterator = _createForOfIteratorHelper(fns),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var fn = _step.value;
      var finish = finishFn.bind(null, fn);
      if (fn.length === 2) fn(context, finish);else fn(finish);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}; // Sequential execution
// Signature: fns[, context], callback
//   fns - <Function[]>, callback-last with err-first contract
//   context - <Object>, incoming data, optional
//   callback - <Function>, err-first on done
//
// Example:
// metasync.sequential([f1, f2, f3], (err, data) => {});


var sequential = function sequential(fns, context, callback) {
  if (!callback) {
    callback = context;
    context = {};
  }

  var done = common.once(callback);
  var isArray = Array.isArray(context);
  var len = fns.length;

  if (len === 0) {
    done(null, context);
    return;
  }

  var i = -1;

  var next = function next() {
    var fn = null;

    var finish = function finish(err, result) {
      if (result !== context && result !== undefined) {
        if (isArray) context.push(result);else if (_typeof(result) === 'object') Object.assign(context, result);
      }

      if (err) {
        done(err);
        return;
      }

      next();
    };

    if (++i === len) {
      done(null, context);
      return;
    }

    fn = fns[i];
    if (fn.length === 2) fn(context, finish);else fn(finish);
  };

  next();
}; // Run `asyncFn` if `condition` is truthy, else return `defaultVal` to callback.
// Signature: condition[, defaultVal], asyncFn, ...args
//   condition - <any>
//   defaultVal - <any>, optional, value that will be returned to callback if
//       `condition` is falsy.
//   asyncFn - <Function>, callback-last function that will be executed if
//       `condition` if truthy
//   args - <any[]>, args to pass to `asyncFn`


var runIf = function runIf(condition, defaultVal, asyncFn) {
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  if (typeof defaultVal === 'function') {
    args.unshift(asyncFn);
    asyncFn = defaultVal;
    defaultVal = undefined;
  }

  if (condition) {
    asyncFn.apply(void 0, args);
  } else {
    var callback = common.last(args);
    process.nextTick(callback, null, defaultVal);
  }
}; // Run `asyncFn` if it is provided
// Signature: asyncFn, ...args
//   asyncFn - <Function>, callback-last function that will be executed if it
//       is provided
//   args - <any[]>, args to pass to `asyncFn`


var runIfFn = function runIfFn(asyncFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  runIf.apply(void 0, [asyncFn, undefined, asyncFn].concat(args));
};

module.exports = {
  firstOf: firstOf,
  parallel: parallel,
  sequential: sequential,
  runIf: runIf,
  runIfFn: runIfFn
};