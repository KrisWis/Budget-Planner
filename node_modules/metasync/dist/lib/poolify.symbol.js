'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var poolified = Symbol('poolified');

var mixFlag = _defineProperty({}, poolified, true);

var duplicate = function duplicate(factory, n) {
  return Array.from({
    length: n
  }, factory).map(function (instance) {
    return Object.assign(instance, mixFlag);
  });
};

var provide = function provide(callback) {
  return function (item) {
    setImmediate(function () {
      callback(item);
    });
  };
};

var poolify = function poolify(factory, min, norm, max) {
  var allocated = norm;

  var pool = function pool(par) {
    if (par && par[poolified]) {
      var delayed = pool.delayed.shift();
      if (delayed) delayed(par);else pool.items.push(par);
      return pool;
    }

    if (pool.items.length < min && allocated < max) {
      var _pool$items;

      var grow = Math.min(max - allocated, norm - pool.items.length);
      allocated += grow;
      var items = duplicate(factory, grow);

      (_pool$items = pool.items).push.apply(_pool$items, _toConsumableArray(items));
    }

    var res = pool.items.pop();
    if (!par) return res;
    var callback = provide(par);
    if (res) callback(res);else pool.delayed.push(callback);
    return pool;
  };

  return Object.assign(pool, {
    items: duplicate(factory, norm),
    delayed: []
  });
};

module.exports = {
  poolify: poolify
};