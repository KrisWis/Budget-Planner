'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AsyncEmitter =
/*#__PURE__*/
function () {
  function AsyncEmitter() {
    _classCallCheck(this, AsyncEmitter);

    this.events = new Map();
  } // Get or create event
  //   name <string> event name
  // Returns: { on: Set { <Function> }, once: Set{ <Function> } }


  _createClass(AsyncEmitter, [{
    key: "event",
    value: function event(name) {
      var event = this.events.get(name);
      if (event) return event;
      var on = new Set();
      var once = new Set();
      event = {
        on: on,
        once: once
      };
      this.events.set(name, event);
      return event;
    } // Add listener
    //   name <string> event name
    //   fn <Function> listener

  }, {
    key: "on",
    value: function on(name, fn) {
      this.event(name).on.add(fn);
    } // Add listener
    //   name <string> event name
    //   fn <Function> listener
    // Returns: <Promise> | <null>

  }, {
    key: "once",
    value: function once(name, fn) {
      var _this = this;

      if (fn === undefined) {
        return new Promise(function (resolve) {
          _this.once(name,
          /*#__PURE__*/
          _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", resolve());

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })));
        });
      }

      this.event(name).once.add(fn);
      return null;
    } // Emit event
    //   name <string> event name
    //   args <any[]>
    // Returns: <Promise> | <null>

  }, {
    key: "emit",
    value: function () {
      var _emit = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2(name) {
        var _len,
            args,
            _key,
            event,
            on,
            once,
            aon,
            aonce,
            promises,
            _args2 = arguments;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                for (_len = _args2.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = _args2[_key];
                }

                event = this.events.get(name);

                if (event) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return");

              case 4:
                on = event.on, once = event.once;
                aon = _toConsumableArray(on.values());
                aonce = _toConsumableArray(once.values());
                promises = aon.concat(aonce).map(function (fn) {
                  return fn.apply(void 0, args);
                });
                _context2.next = 10;
                return Promise.all(promises);

              case 10:
                once.clear();
                this.cleanup(name, on, once);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function emit(_x) {
        return _emit.apply(this, arguments);
      }

      return emit;
    }() // Remove event listener
    //   name <string> event name
    //   fn <Function> listener to remove

  }, {
    key: "remove",
    value: function remove(name, fn) {
      var events = this.events;
      var event = events.get(name);
      if (!event) return;
      var on = event.on,
          once = event.once;
      on["delete"](fn);
      once["delete"](fn);
      this.cleanup(name, on, once);
    } // Remove event if no listeners
    //  name <string>
    //  on <Set> lesteners
    //  once <Set> lesteners

  }, {
    key: "cleanup",
    value: function cleanup(name, on, once) {
      if (on.size === 0 && once.size === 0) {
        this.events["delete"](name);
      }
    } // Remove all listeners or by name
    //   name <string> event name

  }, {
    key: "clear",
    value: function clear(name) {
      var events = this.events;

      if (!name) {
        events.clear();
        return;
      }

      var event = events.get(name);
      if (event) events["delete"](name);
    } // Get listeners count by event name
    //   name <string> event name
    // Returns: <number>

  }, {
    key: "count",
    value: function count(name) {
      var event = this.events.get(name);
      if (!event) return 0;
      var on = event.on,
          once = event.once;
      return on.size + once.size;
    } // Get listeners array by event name
    //   name <string> event name
    // Returns: <Function[]>

  }, {
    key: "listeners",
    value: function listeners(name) {
      var event = this.events.get(name);
      if (!event) return [];
      var on = event.on,
          once = event.once;
      return [].concat(_toConsumableArray(on.values()), _toConsumableArray(once.values()));
    } // Get event names array
    // Returns: <string[]> names

  }, {
    key: "names",
    value: function names() {
      return _toConsumableArray(this.events.keys());
    }
  }]);

  return AsyncEmitter;
}();

module.exports = {
  AsyncEmitter: AsyncEmitter
};