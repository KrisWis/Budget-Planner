'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var asyncChainMethods = null; // Convert synchronous function to asynchronous
// Transform function with args arguments and callback
// to function with args as separate values and callback
//   fn - <Function>, callback-last / err-first
//
// Returns: <Function>

var toAsync = function toAsync(fn) {
  return function () {
    for (var _len = arguments.length, argsCb = new Array(_len), _key = 0; _key < _len; _key++) {
      argsCb[_key] = arguments[_key];
    }

    var len = argsCb.length - 1;
    var callback = argsCb[len];
    var args = argsCb.slice(0, len);
    return fn(args, callback);
  };
}; // Wrap function adding async chain methods
//   fn - <Function>, asynchronous
//   args - <Array>, its arguments


var asAsync = function asAsync(fn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var wrapped = fn.bind.apply(fn, [null].concat(args));

  var _loop = function _loop(name) {
    var method = asyncChainMethods[name];

    wrapped[name] = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return asAsync(method.apply(void 0, [wrapped].concat(args)));
    };
  };

  for (var name in asyncChainMethods) {
    _loop(name);
  }

  return wrapped;
}; // Applicative f => a -> f a
//   args - <Array>


var of = function of() {
  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return asAsync(function (callback) {
    return callback.apply(void 0, [null].concat(args));
  });
}; // Monoid m => a -> a -> a
//   fn1 - <Function>
//   fn2 - <Function>


var concat = function concat(fn1, fn2) {
  return toAsync(function (args1, callback) {
    return fn1.apply(void 0, _toConsumableArray(args1).concat([function (err) {
      for (var _len5 = arguments.length, args2 = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args2[_key5 - 1] = arguments[_key5];
      }

      if (err !== null) callback(err);else fn2.apply(void 0, args2.concat([callback]));
    }]));
  });
}; // Functor f => (a -> b) -> f a -> f b
//   fn1 - <Function>
//   f - <Function>


var fmap = function fmap(fn1, f) {
  var fn2 = toAsync(function (args, callback) {
    return of(f.apply(void 0, _toConsumableArray(args)))(callback);
  });
  return concat(fn1, fn2);
}; // Applicative f => f (a -> b) -> f a -> f b
//   fn - <Function>
//   funcA - <Function>


var ap = function ap(fn, funcA) {
  return concat(funcA, function (f, callback) {
    return fmap(fn, f)(callback);
  });
};

asyncChainMethods = {
  fmap: fmap,
  ap: ap,
  concat: concat
};
module.exports = {
  toAsync: toAsync,
  asAsync: asAsync,
  of: of,
  concat: concat,
  fmap: fmap,
  ap: ap
};