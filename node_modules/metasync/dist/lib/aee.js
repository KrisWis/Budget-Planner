'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AsyncEventEmitter =
/*#__PURE__*/
function () {
  function AsyncEventEmitter() {
    _classCallCheck(this, AsyncEventEmitter);

    this.events = new Map();
    this.wrappers = new Map();
  }

  _createClass(AsyncEventEmitter, [{
    key: "on",
    value: function on(name, fn) {
      var event = this.events.get(name);
      if (event) event.add(fn);else this.events.set(name, new Set([fn]));
    }
  }, {
    key: "once",
    value: function once(name, fn) {
      var _this = this;

      var wrapper = function wrapper() {
        _this.remove(name, wrapper);

        fn.apply(void 0, arguments);
      };

      this.wrappers.set(fn, wrapper);
      this.on(name, wrapper);
    }
  }, {
    key: "emit",
    value: function () {
      var _emit = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(name) {
        var _len,
            args,
            _key,
            event,
            promises,
            _args = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = _args[_key];
                }

                event = this.events.get(name);

                if (event) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", undefined);

              case 4:
                promises = _toConsumableArray(event.values()).map(function (fn) {
                  return fn.apply(void 0, args);
                });
                return _context.abrupt("return", Promise.all(promises));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function emit(_x) {
        return _emit.apply(this, arguments);
      }

      return emit;
    }()
  }, {
    key: "remove",
    value: function remove(name, fn) {
      var event = this.events.get(name);
      if (!event) return;

      if (event.has(fn)) {
        event["delete"](fn);
        return;
      }

      var wrapper = this.wrappers.get(fn);

      if (wrapper) {
        event["delete"](wrapper);
        if (event.size === 0) this.events["delete"](name);
      }
    }
  }, {
    key: "clear",
    value: function clear(name) {
      if (name) this.events["delete"](name);else this.events.clear();
    }
  }, {
    key: "count",
    value: function count(name) {
      var event = this.events.get(name);
      return event ? event.size : 0;
    }
  }, {
    key: "listeners",
    value: function listeners(name) {
      var event = this.events.get(name);
      return new Set(event);
    }
  }, {
    key: "names",
    value: function names() {
      return _toConsumableArray(this.events.keys());
    }
  }]);

  return AsyncEventEmitter;
}();

module.exports = {
  AsyncEventEmitter: AsyncEventEmitter
};