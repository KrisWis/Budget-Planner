'use strict'; // Convert Promise to callback-last
//   promise <Promise>
//   callback <Function>

var promiseToCallbackLast = function promiseToCallbackLast(promise) {
  return function (callback) {
    promise.then(function (value) {
      callback(null, value);
    }, function (reason) {
      callback(reason);
    });
  };
}; // Convert Promise-returning to callback-last / error-first contract
//   fn <Function> promise-returning function
//
// Returns: <Function>


var callbackify = function callbackify(fn) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var callback = args.pop();
    promiseToCallbackLast(fn.apply(void 0, args))(callback);
  };
}; // Convert sync function to callback-last / error-first contract
//   fn <Function> regular synchronous function
//
// Returns: <Function> with contract: callback-last / error-first


var asyncify = function asyncify(fn) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var callback = args.pop();
    setTimeout(function () {
      var result;

      try {
        result = fn.apply(void 0, args);
      } catch (error) {
        callback(error);
        return;
      }

      callback(null, result);
    }, 0);
  };
}; // Convert async function to Promise-returning function
//   fn <Function> callback-last function
//
// Returns: <Function> Promise-returning function


var promisify = function promisify(fn) {
  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return new Promise(function (resolve, reject) {
      fn.apply(void 0, args.concat([function (err, data) {
        if (err) reject(err);else resolve(data);
      }]));
    });
  };
}; // Convert sync function to Promise object
//   fn <Function> regular synchronous function
//
// Returns: <Function> Promise-returning function


var promisifySync = function promisifySync(fn) {
  return function () {
    var result;

    try {
      result = fn.apply(void 0, arguments);
    } catch (error) {
      return Promise.reject(error);
    }

    return Promise.resolve(result);
  };
};

module.exports = {
  callbackify: callbackify,
  asyncify: asyncify,
  promiseToCallbackLast: promiseToCallbackLast,
  promisify: promisify,
  promisifySync: promisifySync
};